Terminals unused in grammar

    COLON
    SKIP
    EQU
    XCHG


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line

    5 line: label
    6     | label directive
    7     | directive
    8     | label instruction
    9     | instruction

   10 directive: SECTION SYMBOL
   11          | GLOBAL SYMLIST
   12          | WORD EXPR_LIST
   13          | EXTERN SYMLIST
   14          | ASCII STRING
   15          | END

   16 instruction: noop_opcode
   17            | RET
   18            | IRET
   19            | PUSH REG
   20            | POP REG
   21            | NOT REG
   22            | CALL jmp_operand
   23            | JMP jmp_operand
   24            | jmp_opcode REG ',' REG ',' jmp_operand
   25            | tworeg_opcode REG ',' REG
   26            | LD operand ',' REG
   27            | ST REG ',' operand
   28            | CSRRD SREG ',' REG
   29            | CSRWR REG ',' SREG

   30 operand: '$' NUM
   31        | '$' SYMBOL
   32        | NUM
   33        | SYMBOL
   34        | REG
   35        | '[' REG ']'
   36        | '[' REG '+' NUM ']'
   37        | '[' REG '+' SYMBOL ']'

   38 jmp_operand: NUM
   39            | SYMBOL

   40 noop_opcode: HALT
   41            | INT

   42 tworeg_opcode: ADD
   43              | SUB
   44              | MUL
   45              | DIV
   46              | SHL
   47              | SHR
   48              | AND
   49              | XOR
   50              | OR

   51 jmp_opcode: BEQ
   52           | BNE
   53           | BGT

   54 label: SYMBOL ':'

   55 SYMLIST: SYMBOL
   56        | SYMLIST ',' SYMBOL

   57 EXPR_LIST: SYMBOL
   58          | NUM
   59          | EXPR_LIST ',' SYMBOL
   60          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 30 31
    '+' (43) 36 37
    ',' (44) 24 25 26 27 28 29 56 59 60
    ':' (58) 54
    '[' (91) 35 36 37
    ']' (93) 35 36 37
    error (256)
    GLOBAL (258) 11
    EXTERN (259) 13
    ENDL (260) 2 3
    SECTION (261) 10
    COLON (262)
    WORD (263) 12
    SKIP (264)
    ASCII (265) 14
    EQU (266)
    END (267) 15
    HALT (268) 40
    INT (269) 41
    IRET (270) 18
    CALL (271) 22
    RET (272) 17
    JMP (273) 23
    BEQ (274) 51
    BNE (275) 52
    BGT (276) 53
    PUSH (277) 19
    POP (278) 20
    XCHG (279)
    ADD (280) 42
    SUB (281) 43
    MUL (282) 44
    DIV (283) 45
    NOT (284) 21
    AND (285) 48
    OR (286) 50
    XOR (287) 49
    SHL (288) 46
    SHR (289) 47
    LD (290) 26
    ST (291) 27
    CSRRD (292) 28
    CSRWR (293) 29
    SYMBOL <string> (294) 10 31 33 37 39 54 55 56 57 59
    STRING <string> (295) 14
    NUM <number> (296) 30 32 36 38 58 60
    REG <number> (297) 19 20 21 24 25 26 27 28 29 34 35 36 37
    SREG <number> (298) 28 29


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    lines (52)
        on left: 2 3 4
        on right: 1 2 3
    line (53)
        on left: 5 6 7 8 9
        on right: 2 4
    directive (54)
        on left: 10 11 12 13 14 15
        on right: 6 7
    instruction (55)
        on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29
        on right: 8 9
    operand <operand> (56)
        on left: 30 31 32 33 34 35 36 37
        on right: 26 27
    jmp_operand <operand> (57)
        on left: 38 39
        on right: 22 23 24
    noop_opcode <instrType> (58)
        on left: 40 41
        on right: 16
    tworeg_opcode <instrType> (59)
        on left: 42 43 44 45 46 47 48 49 50
        on right: 25
    jmp_opcode <instrType> (60)
        on left: 51 52 53
        on right: 24
    label (61)
        on left: 54
        on right: 5 6 8
    SYMLIST <stringvec> (62)
        on left: 55 56
        on right: 11 13 56
    EXPR_LIST <exprvec> (63)
        on left: 57 58 59 60
        on right: 12 59 60


State 0

    0 $accept: • program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    ADD      shift, and go to state 18
    SUB      shift, and go to state 19
    MUL      shift, and go to state 20
    DIV      shift, and go to state 21
    NOT      shift, and go to state 22
    AND      shift, and go to state 23
    OR       shift, and go to state 24
    XOR      shift, and go to state 25
    SHL      shift, and go to state 26
    SHR      shift, and go to state 27
    LD       shift, and go to state 28
    ST       shift, and go to state 29
    CSRRD    shift, and go to state 30
    CSRWR    shift, and go to state 31
    SYMBOL   shift, and go to state 32

    program        go to state 33
    lines          go to state 34
    line           go to state 35
    directive      go to state 36
    instruction    go to state 37
    noop_opcode    go to state 38
    tworeg_opcode  go to state 39
    jmp_opcode     go to state 40
    label          go to state 41


State 1

   11 directive: GLOBAL • SYMLIST

    SYMBOL  shift, and go to state 42

    SYMLIST  go to state 43


State 2

   13 directive: EXTERN • SYMLIST

    SYMBOL  shift, and go to state 42

    SYMLIST  go to state 44


State 3

   10 directive: SECTION • SYMBOL

    SYMBOL  shift, and go to state 45


State 4

   12 directive: WORD • EXPR_LIST

    SYMBOL  shift, and go to state 46
    NUM     shift, and go to state 47

    EXPR_LIST  go to state 48


State 5

   14 directive: ASCII • STRING

    STRING  shift, and go to state 49


State 6

   15 directive: END •

    $default  reduce using rule 15 (directive)


State 7

   40 noop_opcode: HALT •

    $default  reduce using rule 40 (noop_opcode)


State 8

   41 noop_opcode: INT •

    $default  reduce using rule 41 (noop_opcode)


State 9

   18 instruction: IRET •

    $default  reduce using rule 18 (instruction)


State 10

   22 instruction: CALL • jmp_operand

    SYMBOL  shift, and go to state 50
    NUM     shift, and go to state 51

    jmp_operand  go to state 52


State 11

   17 instruction: RET •

    $default  reduce using rule 17 (instruction)


State 12

   23 instruction: JMP • jmp_operand

    SYMBOL  shift, and go to state 50
    NUM     shift, and go to state 51

    jmp_operand  go to state 53


State 13

   51 jmp_opcode: BEQ •

    $default  reduce using rule 51 (jmp_opcode)


State 14

   52 jmp_opcode: BNE •

    $default  reduce using rule 52 (jmp_opcode)


State 15

   53 jmp_opcode: BGT •

    $default  reduce using rule 53 (jmp_opcode)


State 16

   19 instruction: PUSH • REG

    REG  shift, and go to state 54


State 17

   20 instruction: POP • REG

    REG  shift, and go to state 55


State 18

   42 tworeg_opcode: ADD •

    $default  reduce using rule 42 (tworeg_opcode)


State 19

   43 tworeg_opcode: SUB •

    $default  reduce using rule 43 (tworeg_opcode)


State 20

   44 tworeg_opcode: MUL •

    $default  reduce using rule 44 (tworeg_opcode)


State 21

   45 tworeg_opcode: DIV •

    $default  reduce using rule 45 (tworeg_opcode)


State 22

   21 instruction: NOT • REG

    REG  shift, and go to state 56


State 23

   48 tworeg_opcode: AND •

    $default  reduce using rule 48 (tworeg_opcode)


State 24

   50 tworeg_opcode: OR •

    $default  reduce using rule 50 (tworeg_opcode)


State 25

   49 tworeg_opcode: XOR •

    $default  reduce using rule 49 (tworeg_opcode)


State 26

   46 tworeg_opcode: SHL •

    $default  reduce using rule 46 (tworeg_opcode)


State 27

   47 tworeg_opcode: SHR •

    $default  reduce using rule 47 (tworeg_opcode)


State 28

   26 instruction: LD • operand ',' REG

    SYMBOL  shift, and go to state 57
    NUM     shift, and go to state 58
    REG     shift, and go to state 59
    '$'     shift, and go to state 60
    '['     shift, and go to state 61

    operand  go to state 62


State 29

   27 instruction: ST • REG ',' operand

    REG  shift, and go to state 63


State 30

   28 instruction: CSRRD • SREG ',' REG

    SREG  shift, and go to state 64


State 31

   29 instruction: CSRWR • REG ',' SREG

    REG  shift, and go to state 65


State 32

   54 label: SYMBOL • ':'

    ':'  shift, and go to state 66


State 33

    0 $accept: program • $end

    $end  shift, and go to state 67


State 34

    1 program: lines •
    2 lines: lines • ENDL line
    3      | lines • ENDL

    ENDL  shift, and go to state 68

    $default  reduce using rule 1 (program)


State 35

    4 lines: line •

    $default  reduce using rule 4 (lines)


State 36

    7 line: directive •

    $default  reduce using rule 7 (line)


State 37

    9 line: instruction •

    $default  reduce using rule 9 (line)


State 38

   16 instruction: noop_opcode •

    $default  reduce using rule 16 (instruction)


State 39

   25 instruction: tworeg_opcode • REG ',' REG

    REG  shift, and go to state 69


State 40

   24 instruction: jmp_opcode • REG ',' REG ',' jmp_operand

    REG  shift, and go to state 70


State 41

    5 line: label •
    6     | label • directive
    8     | label • instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    ADD      shift, and go to state 18
    SUB      shift, and go to state 19
    MUL      shift, and go to state 20
    DIV      shift, and go to state 21
    NOT      shift, and go to state 22
    AND      shift, and go to state 23
    OR       shift, and go to state 24
    XOR      shift, and go to state 25
    SHL      shift, and go to state 26
    SHR      shift, and go to state 27
    LD       shift, and go to state 28
    ST       shift, and go to state 29
    CSRRD    shift, and go to state 30
    CSRWR    shift, and go to state 31

    $default  reduce using rule 5 (line)

    directive      go to state 71
    instruction    go to state 72
    noop_opcode    go to state 38
    tworeg_opcode  go to state 39
    jmp_opcode     go to state 40


State 42

   55 SYMLIST: SYMBOL •

    $default  reduce using rule 55 (SYMLIST)


State 43

   11 directive: GLOBAL SYMLIST •
   56 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 73

    $default  reduce using rule 11 (directive)


State 44

   13 directive: EXTERN SYMLIST •
   56 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 73

    $default  reduce using rule 13 (directive)


State 45

   10 directive: SECTION SYMBOL •

    $default  reduce using rule 10 (directive)


State 46

   57 EXPR_LIST: SYMBOL •

    $default  reduce using rule 57 (EXPR_LIST)


State 47

   58 EXPR_LIST: NUM •

    $default  reduce using rule 58 (EXPR_LIST)


State 48

   12 directive: WORD EXPR_LIST •
   59 EXPR_LIST: EXPR_LIST • ',' SYMBOL
   60          | EXPR_LIST • ',' NUM

    ','  shift, and go to state 74

    $default  reduce using rule 12 (directive)


State 49

   14 directive: ASCII STRING •

    $default  reduce using rule 14 (directive)


State 50

   39 jmp_operand: SYMBOL •

    $default  reduce using rule 39 (jmp_operand)


State 51

   38 jmp_operand: NUM •

    $default  reduce using rule 38 (jmp_operand)


State 52

   22 instruction: CALL jmp_operand •

    $default  reduce using rule 22 (instruction)


State 53

   23 instruction: JMP jmp_operand •

    $default  reduce using rule 23 (instruction)


State 54

   19 instruction: PUSH REG •

    $default  reduce using rule 19 (instruction)


State 55

   20 instruction: POP REG •

    $default  reduce using rule 20 (instruction)


State 56

   21 instruction: NOT REG •

    $default  reduce using rule 21 (instruction)


State 57

   33 operand: SYMBOL •

    $default  reduce using rule 33 (operand)


State 58

   32 operand: NUM •

    $default  reduce using rule 32 (operand)


State 59

   34 operand: REG •

    $default  reduce using rule 34 (operand)


State 60

   30 operand: '$' • NUM
   31        | '$' • SYMBOL

    SYMBOL  shift, and go to state 75
    NUM     shift, and go to state 76


State 61

   35 operand: '[' • REG ']'
   36        | '[' • REG '+' NUM ']'
   37        | '[' • REG '+' SYMBOL ']'

    REG  shift, and go to state 77


State 62

   26 instruction: LD operand • ',' REG

    ','  shift, and go to state 78


State 63

   27 instruction: ST REG • ',' operand

    ','  shift, and go to state 79


State 64

   28 instruction: CSRRD SREG • ',' REG

    ','  shift, and go to state 80


State 65

   29 instruction: CSRWR REG • ',' SREG

    ','  shift, and go to state 81


State 66

   54 label: SYMBOL ':' •

    $default  reduce using rule 54 (label)


State 67

    0 $accept: program $end •

    $default  accept


State 68

    2 lines: lines ENDL • line
    3      | lines ENDL •

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    ADD      shift, and go to state 18
    SUB      shift, and go to state 19
    MUL      shift, and go to state 20
    DIV      shift, and go to state 21
    NOT      shift, and go to state 22
    AND      shift, and go to state 23
    OR       shift, and go to state 24
    XOR      shift, and go to state 25
    SHL      shift, and go to state 26
    SHR      shift, and go to state 27
    LD       shift, and go to state 28
    ST       shift, and go to state 29
    CSRRD    shift, and go to state 30
    CSRWR    shift, and go to state 31
    SYMBOL   shift, and go to state 32

    $default  reduce using rule 3 (lines)

    line           go to state 82
    directive      go to state 36
    instruction    go to state 37
    noop_opcode    go to state 38
    tworeg_opcode  go to state 39
    jmp_opcode     go to state 40
    label          go to state 41


State 69

   25 instruction: tworeg_opcode REG • ',' REG

    ','  shift, and go to state 83


State 70

   24 instruction: jmp_opcode REG • ',' REG ',' jmp_operand

    ','  shift, and go to state 84


State 71

    6 line: label directive •

    $default  reduce using rule 6 (line)


State 72

    8 line: label instruction •

    $default  reduce using rule 8 (line)


State 73

   56 SYMLIST: SYMLIST ',' • SYMBOL

    SYMBOL  shift, and go to state 85


State 74

   59 EXPR_LIST: EXPR_LIST ',' • SYMBOL
   60          | EXPR_LIST ',' • NUM

    SYMBOL  shift, and go to state 86
    NUM     shift, and go to state 87


State 75

   31 operand: '$' SYMBOL •

    $default  reduce using rule 31 (operand)


State 76

   30 operand: '$' NUM •

    $default  reduce using rule 30 (operand)


State 77

   35 operand: '[' REG • ']'
   36        | '[' REG • '+' NUM ']'
   37        | '[' REG • '+' SYMBOL ']'

    ']'  shift, and go to state 88
    '+'  shift, and go to state 89


State 78

   26 instruction: LD operand ',' • REG

    REG  shift, and go to state 90


State 79

   27 instruction: ST REG ',' • operand

    SYMBOL  shift, and go to state 57
    NUM     shift, and go to state 58
    REG     shift, and go to state 59
    '$'     shift, and go to state 60
    '['     shift, and go to state 61

    operand  go to state 91


State 80

   28 instruction: CSRRD SREG ',' • REG

    REG  shift, and go to state 92


State 81

   29 instruction: CSRWR REG ',' • SREG

    SREG  shift, and go to state 93


State 82

    2 lines: lines ENDL line •

    $default  reduce using rule 2 (lines)


State 83

   25 instruction: tworeg_opcode REG ',' • REG

    REG  shift, and go to state 94


State 84

   24 instruction: jmp_opcode REG ',' • REG ',' jmp_operand

    REG  shift, and go to state 95


State 85

   56 SYMLIST: SYMLIST ',' SYMBOL •

    $default  reduce using rule 56 (SYMLIST)


State 86

   59 EXPR_LIST: EXPR_LIST ',' SYMBOL •

    $default  reduce using rule 59 (EXPR_LIST)


State 87

   60 EXPR_LIST: EXPR_LIST ',' NUM •

    $default  reduce using rule 60 (EXPR_LIST)


State 88

   35 operand: '[' REG ']' •

    $default  reduce using rule 35 (operand)


State 89

   36 operand: '[' REG '+' • NUM ']'
   37        | '[' REG '+' • SYMBOL ']'

    SYMBOL  shift, and go to state 96
    NUM     shift, and go to state 97


State 90

   26 instruction: LD operand ',' REG •

    $default  reduce using rule 26 (instruction)


State 91

   27 instruction: ST REG ',' operand •

    $default  reduce using rule 27 (instruction)


State 92

   28 instruction: CSRRD SREG ',' REG •

    $default  reduce using rule 28 (instruction)


State 93

   29 instruction: CSRWR REG ',' SREG •

    $default  reduce using rule 29 (instruction)


State 94

   25 instruction: tworeg_opcode REG ',' REG •

    $default  reduce using rule 25 (instruction)


State 95

   24 instruction: jmp_opcode REG ',' REG • ',' jmp_operand

    ','  shift, and go to state 98


State 96

   37 operand: '[' REG '+' SYMBOL • ']'

    ']'  shift, and go to state 99


State 97

   36 operand: '[' REG '+' NUM • ']'

    ']'  shift, and go to state 100


State 98

   24 instruction: jmp_opcode REG ',' REG ',' • jmp_operand

    SYMBOL  shift, and go to state 50
    NUM     shift, and go to state 51

    jmp_operand  go to state 101


State 99

   37 operand: '[' REG '+' SYMBOL ']' •

    $default  reduce using rule 37 (operand)


State 100

   36 operand: '[' REG '+' NUM ']' •

    $default  reduce using rule 36 (operand)


State 101

   24 instruction: jmp_opcode REG ',' REG ',' jmp_operand •

    $default  reduce using rule 24 (instruction)
