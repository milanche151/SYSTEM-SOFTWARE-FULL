Terminals unused in grammar

    COLON
    SKIP
    EQU
    INT
    IRET
    RET
    XCHG
    SUB
    MUL
    DIV
    NOT
    AND
    OR
    XOR
    SHL
    SHR
    CSRRD
    CSRWR
    SREG


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line

    5 line: label
    6     | label directive
    7     | directive
    8     | label instruction
    9     | instruction

   10 directive: SECTION SYMBOL
   11          | GLOBAL SYMLIST
   12          | WORD EXPR_LIST
   13          | EXTERN SYMLIST
   14          | ASCII STRING
   15          | END

   16 instruction: noop_opcode
   17            | PUSH REG
   18            | POP REG
   19            | tworeg_opcode REG ',' REG
   20            | LD operand ',' REG
   21            | ST REG ',' operand
   22            | CALL jmp_operand
   23            | JMP jmp_operand
   24            | jmp_opcode REG ',' REG ',' jmp_operand

   25 operand: '$' NUM
   26        | '$' SYMBOL
   27        | NUM
   28        | SYMBOL
   29        | REG
   30        | '[' REG ']'
   31        | '[' REG '+' NUM ']'
   32        | '[' REG '+' SYMBOL ']'

   33 jmp_operand: NUM
   34            | SYMBOL

   35 noop_opcode: HALT

   36 tworeg_opcode: ADD

   37 jmp_opcode: BEQ
   38           | BNE
   39           | BGT

   40 label: SYMBOL ':'

   41 SYMLIST: SYMBOL
   42        | SYMLIST ',' SYMBOL

   43 EXPR_LIST: SYMBOL
   44          | NUM
   45          | EXPR_LIST ',' SYMBOL
   46          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 25 26
    '+' (43) 31 32
    ',' (44) 19 20 21 24 42 45 46
    ':' (58) 40
    '[' (91) 30 31 32
    ']' (93) 30 31 32
    error (256)
    GLOBAL (258) 11
    EXTERN (259) 13
    ENDL (260) 2 3
    SECTION (261) 10
    COLON (262)
    WORD (263) 12
    SKIP (264)
    ASCII (265) 14
    EQU (266)
    END (267) 15
    HALT (268) 35
    INT (269)
    IRET (270)
    CALL (271) 22
    RET (272)
    JMP (273) 23
    BEQ (274) 37
    BNE (275) 38
    BGT (276) 39
    PUSH (277) 17
    POP (278) 18
    XCHG (279)
    ADD (280) 36
    SUB (281)
    MUL (282)
    DIV (283)
    NOT (284)
    AND (285)
    OR (286)
    XOR (287)
    SHL (288)
    SHR (289)
    LD (290) 20
    ST (291) 21
    CSRRD (292)
    CSRWR (293)
    SYMBOL <string> (294) 10 26 28 32 34 40 41 42 43 45
    STRING <string> (295) 14
    NUM <number> (296) 25 27 31 33 44 46
    REG <number> (297) 17 18 19 20 21 24 29 30 31 32
    SREG <number> (298)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    lines (52)
        on left: 2 3 4
        on right: 1 2 3
    line (53)
        on left: 5 6 7 8 9
        on right: 2 4
    directive (54)
        on left: 10 11 12 13 14 15
        on right: 6 7
    instruction (55)
        on left: 16 17 18 19 20 21 22 23 24
        on right: 8 9
    operand <operand> (56)
        on left: 25 26 27 28 29 30 31 32
        on right: 20 21
    jmp_operand <operand> (57)
        on left: 33 34
        on right: 22 23 24
    noop_opcode <instrType> (58)
        on left: 35
        on right: 16
    tworeg_opcode <instrType> (59)
        on left: 36
        on right: 19
    jmp_opcode <instrType> (60)
        on left: 37 38 39
        on right: 24
    label (61)
        on left: 40
        on right: 5 6 8
    SYMLIST <stringvec> (62)
        on left: 41 42
        on right: 11 13 42
    EXPR_LIST <exprvec> (63)
        on left: 43 44 45 46
        on right: 12 45 46


State 0

    0 $accept: • program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    CALL     shift, and go to state 8
    JMP      shift, and go to state 9
    BEQ      shift, and go to state 10
    BNE      shift, and go to state 11
    BGT      shift, and go to state 12
    PUSH     shift, and go to state 13
    POP      shift, and go to state 14
    ADD      shift, and go to state 15
    LD       shift, and go to state 16
    ST       shift, and go to state 17
    SYMBOL   shift, and go to state 18

    program        go to state 19
    lines          go to state 20
    line           go to state 21
    directive      go to state 22
    instruction    go to state 23
    noop_opcode    go to state 24
    tworeg_opcode  go to state 25
    jmp_opcode     go to state 26
    label          go to state 27


State 1

   11 directive: GLOBAL • SYMLIST

    SYMBOL  shift, and go to state 28

    SYMLIST  go to state 29


State 2

   13 directive: EXTERN • SYMLIST

    SYMBOL  shift, and go to state 28

    SYMLIST  go to state 30


State 3

   10 directive: SECTION • SYMBOL

    SYMBOL  shift, and go to state 31


State 4

   12 directive: WORD • EXPR_LIST

    SYMBOL  shift, and go to state 32
    NUM     shift, and go to state 33

    EXPR_LIST  go to state 34


State 5

   14 directive: ASCII • STRING

    STRING  shift, and go to state 35


State 6

   15 directive: END •

    $default  reduce using rule 15 (directive)


State 7

   35 noop_opcode: HALT •

    $default  reduce using rule 35 (noop_opcode)


State 8

   22 instruction: CALL • jmp_operand

    SYMBOL  shift, and go to state 36
    NUM     shift, and go to state 37

    jmp_operand  go to state 38


State 9

   23 instruction: JMP • jmp_operand

    SYMBOL  shift, and go to state 36
    NUM     shift, and go to state 37

    jmp_operand  go to state 39


State 10

   37 jmp_opcode: BEQ •

    $default  reduce using rule 37 (jmp_opcode)


State 11

   38 jmp_opcode: BNE •

    $default  reduce using rule 38 (jmp_opcode)


State 12

   39 jmp_opcode: BGT •

    $default  reduce using rule 39 (jmp_opcode)


State 13

   17 instruction: PUSH • REG

    REG  shift, and go to state 40


State 14

   18 instruction: POP • REG

    REG  shift, and go to state 41


State 15

   36 tworeg_opcode: ADD •

    $default  reduce using rule 36 (tworeg_opcode)


State 16

   20 instruction: LD • operand ',' REG

    SYMBOL  shift, and go to state 42
    NUM     shift, and go to state 43
    REG     shift, and go to state 44
    '$'     shift, and go to state 45
    '['     shift, and go to state 46

    operand  go to state 47


State 17

   21 instruction: ST • REG ',' operand

    REG  shift, and go to state 48


State 18

   40 label: SYMBOL • ':'

    ':'  shift, and go to state 49


State 19

    0 $accept: program • $end

    $end  shift, and go to state 50


State 20

    1 program: lines •
    2 lines: lines • ENDL line
    3      | lines • ENDL

    ENDL  shift, and go to state 51

    $default  reduce using rule 1 (program)


State 21

    4 lines: line •

    $default  reduce using rule 4 (lines)


State 22

    7 line: directive •

    $default  reduce using rule 7 (line)


State 23

    9 line: instruction •

    $default  reduce using rule 9 (line)


State 24

   16 instruction: noop_opcode •

    $default  reduce using rule 16 (instruction)


State 25

   19 instruction: tworeg_opcode • REG ',' REG

    REG  shift, and go to state 52


State 26

   24 instruction: jmp_opcode • REG ',' REG ',' jmp_operand

    REG  shift, and go to state 53


State 27

    5 line: label •
    6     | label • directive
    8     | label • instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    CALL     shift, and go to state 8
    JMP      shift, and go to state 9
    BEQ      shift, and go to state 10
    BNE      shift, and go to state 11
    BGT      shift, and go to state 12
    PUSH     shift, and go to state 13
    POP      shift, and go to state 14
    ADD      shift, and go to state 15
    LD       shift, and go to state 16
    ST       shift, and go to state 17

    $default  reduce using rule 5 (line)

    directive      go to state 54
    instruction    go to state 55
    noop_opcode    go to state 24
    tworeg_opcode  go to state 25
    jmp_opcode     go to state 26


State 28

   41 SYMLIST: SYMBOL •

    $default  reduce using rule 41 (SYMLIST)


State 29

   11 directive: GLOBAL SYMLIST •
   42 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 56

    $default  reduce using rule 11 (directive)


State 30

   13 directive: EXTERN SYMLIST •
   42 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 56

    $default  reduce using rule 13 (directive)


State 31

   10 directive: SECTION SYMBOL •

    $default  reduce using rule 10 (directive)


State 32

   43 EXPR_LIST: SYMBOL •

    $default  reduce using rule 43 (EXPR_LIST)


State 33

   44 EXPR_LIST: NUM •

    $default  reduce using rule 44 (EXPR_LIST)


State 34

   12 directive: WORD EXPR_LIST •
   45 EXPR_LIST: EXPR_LIST • ',' SYMBOL
   46          | EXPR_LIST • ',' NUM

    ','  shift, and go to state 57

    $default  reduce using rule 12 (directive)


State 35

   14 directive: ASCII STRING •

    $default  reduce using rule 14 (directive)


State 36

   34 jmp_operand: SYMBOL •

    $default  reduce using rule 34 (jmp_operand)


State 37

   33 jmp_operand: NUM •

    $default  reduce using rule 33 (jmp_operand)


State 38

   22 instruction: CALL jmp_operand •

    $default  reduce using rule 22 (instruction)


State 39

   23 instruction: JMP jmp_operand •

    $default  reduce using rule 23 (instruction)


State 40

   17 instruction: PUSH REG •

    $default  reduce using rule 17 (instruction)


State 41

   18 instruction: POP REG •

    $default  reduce using rule 18 (instruction)


State 42

   28 operand: SYMBOL •

    $default  reduce using rule 28 (operand)


State 43

   27 operand: NUM •

    $default  reduce using rule 27 (operand)


State 44

   29 operand: REG •

    $default  reduce using rule 29 (operand)


State 45

   25 operand: '$' • NUM
   26        | '$' • SYMBOL

    SYMBOL  shift, and go to state 58
    NUM     shift, and go to state 59


State 46

   30 operand: '[' • REG ']'
   31        | '[' • REG '+' NUM ']'
   32        | '[' • REG '+' SYMBOL ']'

    REG  shift, and go to state 60


State 47

   20 instruction: LD operand • ',' REG

    ','  shift, and go to state 61


State 48

   21 instruction: ST REG • ',' operand

    ','  shift, and go to state 62


State 49

   40 label: SYMBOL ':' •

    $default  reduce using rule 40 (label)


State 50

    0 $accept: program $end •

    $default  accept


State 51

    2 lines: lines ENDL • line
    3      | lines ENDL •

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    CALL     shift, and go to state 8
    JMP      shift, and go to state 9
    BEQ      shift, and go to state 10
    BNE      shift, and go to state 11
    BGT      shift, and go to state 12
    PUSH     shift, and go to state 13
    POP      shift, and go to state 14
    ADD      shift, and go to state 15
    LD       shift, and go to state 16
    ST       shift, and go to state 17
    SYMBOL   shift, and go to state 18

    $default  reduce using rule 3 (lines)

    line           go to state 63
    directive      go to state 22
    instruction    go to state 23
    noop_opcode    go to state 24
    tworeg_opcode  go to state 25
    jmp_opcode     go to state 26
    label          go to state 27


State 52

   19 instruction: tworeg_opcode REG • ',' REG

    ','  shift, and go to state 64


State 53

   24 instruction: jmp_opcode REG • ',' REG ',' jmp_operand

    ','  shift, and go to state 65


State 54

    6 line: label directive •

    $default  reduce using rule 6 (line)


State 55

    8 line: label instruction •

    $default  reduce using rule 8 (line)


State 56

   42 SYMLIST: SYMLIST ',' • SYMBOL

    SYMBOL  shift, and go to state 66


State 57

   45 EXPR_LIST: EXPR_LIST ',' • SYMBOL
   46          | EXPR_LIST ',' • NUM

    SYMBOL  shift, and go to state 67
    NUM     shift, and go to state 68


State 58

   26 operand: '$' SYMBOL •

    $default  reduce using rule 26 (operand)


State 59

   25 operand: '$' NUM •

    $default  reduce using rule 25 (operand)


State 60

   30 operand: '[' REG • ']'
   31        | '[' REG • '+' NUM ']'
   32        | '[' REG • '+' SYMBOL ']'

    ']'  shift, and go to state 69
    '+'  shift, and go to state 70


State 61

   20 instruction: LD operand ',' • REG

    REG  shift, and go to state 71


State 62

   21 instruction: ST REG ',' • operand

    SYMBOL  shift, and go to state 42
    NUM     shift, and go to state 43
    REG     shift, and go to state 44
    '$'     shift, and go to state 45
    '['     shift, and go to state 46

    operand  go to state 72


State 63

    2 lines: lines ENDL line •

    $default  reduce using rule 2 (lines)


State 64

   19 instruction: tworeg_opcode REG ',' • REG

    REG  shift, and go to state 73


State 65

   24 instruction: jmp_opcode REG ',' • REG ',' jmp_operand

    REG  shift, and go to state 74


State 66

   42 SYMLIST: SYMLIST ',' SYMBOL •

    $default  reduce using rule 42 (SYMLIST)


State 67

   45 EXPR_LIST: EXPR_LIST ',' SYMBOL •

    $default  reduce using rule 45 (EXPR_LIST)


State 68

   46 EXPR_LIST: EXPR_LIST ',' NUM •

    $default  reduce using rule 46 (EXPR_LIST)


State 69

   30 operand: '[' REG ']' •

    $default  reduce using rule 30 (operand)


State 70

   31 operand: '[' REG '+' • NUM ']'
   32        | '[' REG '+' • SYMBOL ']'

    SYMBOL  shift, and go to state 75
    NUM     shift, and go to state 76


State 71

   20 instruction: LD operand ',' REG •

    $default  reduce using rule 20 (instruction)


State 72

   21 instruction: ST REG ',' operand •

    $default  reduce using rule 21 (instruction)


State 73

   19 instruction: tworeg_opcode REG ',' REG •

    $default  reduce using rule 19 (instruction)


State 74

   24 instruction: jmp_opcode REG ',' REG • ',' jmp_operand

    ','  shift, and go to state 77


State 75

   32 operand: '[' REG '+' SYMBOL • ']'

    ']'  shift, and go to state 78


State 76

   31 operand: '[' REG '+' NUM • ']'

    ']'  shift, and go to state 79


State 77

   24 instruction: jmp_opcode REG ',' REG ',' • jmp_operand

    SYMBOL  shift, and go to state 36
    NUM     shift, and go to state 37

    jmp_operand  go to state 80


State 78

   32 operand: '[' REG '+' SYMBOL ']' •

    $default  reduce using rule 32 (operand)


State 79

   31 operand: '[' REG '+' NUM ']' •

    $default  reduce using rule 31 (operand)


State 80

   24 instruction: jmp_opcode REG ',' REG ',' jmp_operand •

    $default  reduce using rule 24 (instruction)
