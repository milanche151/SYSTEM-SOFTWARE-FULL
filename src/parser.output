Terminals unused in grammar

    COLON
    SKIP
    EQU
    XCHG


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line
    5      | ENDL

    6 line: label
    7     | label directive
    8     | directive
    9     | label instruction
   10     | instruction

   11 directive: SECTION SYMBOL
   12          | GLOBAL SYMLIST
   13          | WORD EXPR_LIST
   14          | EXTERN SYMLIST
   15          | ASCII STRING
   16          | END

   17 instruction: noop_opcode
   18            | RET
   19            | IRET
   20            | PUSH REG
   21            | POP REG
   22            | NOT REG
   23            | CALL jmp_operand
   24            | JMP jmp_operand
   25            | jmp_opcode REG ',' REG ',' jmp_operand
   26            | tworeg_opcode REG ',' REG
   27            | LD operand ',' REG
   28            | ST REG ',' operand
   29            | CSRRD SREG ',' REG
   30            | CSRWR REG ',' SREG

   31 operand: '$' NUM
   32        | '$' SYMBOL
   33        | NUM
   34        | SYMBOL
   35        | REG
   36        | '[' REG ']'
   37        | '[' REG '+' NUM ']'
   38        | '[' REG '+' SYMBOL ']'

   39 jmp_operand: NUM
   40            | SYMBOL

   41 noop_opcode: HALT
   42            | INT

   43 tworeg_opcode: ADD
   44              | SUB
   45              | MUL
   46              | DIV
   47              | SHL
   48              | SHR
   49              | AND
   50              | XOR
   51              | OR

   52 jmp_opcode: BEQ
   53           | BNE
   54           | BGT

   55 label: SYMBOL ':'

   56 SYMLIST: SYMBOL
   57        | SYMLIST ',' SYMBOL

   58 EXPR_LIST: SYMBOL
   59          | NUM
   60          | EXPR_LIST ',' SYMBOL
   61          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 31 32
    '+' (43) 37 38
    ',' (44) 25 26 27 28 29 30 57 60 61
    ':' (58) 55
    '[' (91) 36 37 38
    ']' (93) 36 37 38
    error (256)
    GLOBAL (258) 12
    EXTERN (259) 14
    ENDL (260) 2 3 5
    SECTION (261) 11
    COLON (262)
    WORD (263) 13
    SKIP (264)
    ASCII (265) 15
    EQU (266)
    END (267) 16
    HALT (268) 41
    INT (269) 42
    IRET (270) 19
    CALL (271) 23
    RET (272) 18
    JMP (273) 24
    BEQ (274) 52
    BNE (275) 53
    BGT (276) 54
    PUSH (277) 20
    POP (278) 21
    XCHG (279)
    ADD (280) 43
    SUB (281) 44
    MUL (282) 45
    DIV (283) 46
    NOT (284) 22
    AND (285) 49
    OR (286) 51
    XOR (287) 50
    SHL (288) 47
    SHR (289) 48
    LD (290) 27
    ST (291) 28
    CSRRD (292) 29
    CSRWR (293) 30
    SYMBOL <string> (294) 11 32 34 38 40 55 56 57 58 60
    STRING <string> (295) 15
    NUM <number> (296) 31 33 37 39 59 61
    REG <number> (297) 20 21 22 25 26 27 28 29 30 35 36 37 38
    SREG <number> (298) 29 30


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    lines (52)
        on left: 2 3 4 5
        on right: 1 2 3
    line (53)
        on left: 6 7 8 9 10
        on right: 2 4
    directive (54)
        on left: 11 12 13 14 15 16
        on right: 7 8
    instruction (55)
        on left: 17 18 19 20 21 22 23 24 25 26 27 28 29 30
        on right: 9 10
    operand <operand> (56)
        on left: 31 32 33 34 35 36 37 38
        on right: 27 28
    jmp_operand <operand> (57)
        on left: 39 40
        on right: 23 24 25
    noop_opcode <instrType> (58)
        on left: 41 42
        on right: 17
    tworeg_opcode <instrType> (59)
        on left: 43 44 45 46 47 48 49 50 51
        on right: 26
    jmp_opcode <instrType> (60)
        on left: 52 53 54
        on right: 25
    label (61)
        on left: 55
        on right: 6 7 9
    SYMLIST <stringvec> (62)
        on left: 56 57
        on right: 12 14 57
    EXPR_LIST <exprvec> (63)
        on left: 58 59 60 61
        on right: 13 60 61


State 0

    0 $accept: • program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    ENDL     shift, and go to state 3
    SECTION  shift, and go to state 4
    WORD     shift, and go to state 5
    ASCII    shift, and go to state 6
    END      shift, and go to state 7
    HALT     shift, and go to state 8
    INT      shift, and go to state 9
    IRET     shift, and go to state 10
    CALL     shift, and go to state 11
    RET      shift, and go to state 12
    JMP      shift, and go to state 13
    BEQ      shift, and go to state 14
    BNE      shift, and go to state 15
    BGT      shift, and go to state 16
    PUSH     shift, and go to state 17
    POP      shift, and go to state 18
    ADD      shift, and go to state 19
    SUB      shift, and go to state 20
    MUL      shift, and go to state 21
    DIV      shift, and go to state 22
    NOT      shift, and go to state 23
    AND      shift, and go to state 24
    OR       shift, and go to state 25
    XOR      shift, and go to state 26
    SHL      shift, and go to state 27
    SHR      shift, and go to state 28
    LD       shift, and go to state 29
    ST       shift, and go to state 30
    CSRRD    shift, and go to state 31
    CSRWR    shift, and go to state 32
    SYMBOL   shift, and go to state 33

    program        go to state 34
    lines          go to state 35
    line           go to state 36
    directive      go to state 37
    instruction    go to state 38
    noop_opcode    go to state 39
    tworeg_opcode  go to state 40
    jmp_opcode     go to state 41
    label          go to state 42


State 1

   12 directive: GLOBAL • SYMLIST

    SYMBOL  shift, and go to state 43

    SYMLIST  go to state 44


State 2

   14 directive: EXTERN • SYMLIST

    SYMBOL  shift, and go to state 43

    SYMLIST  go to state 45


State 3

    5 lines: ENDL •

    $default  reduce using rule 5 (lines)


State 4

   11 directive: SECTION • SYMBOL

    SYMBOL  shift, and go to state 46


State 5

   13 directive: WORD • EXPR_LIST

    SYMBOL  shift, and go to state 47
    NUM     shift, and go to state 48

    EXPR_LIST  go to state 49


State 6

   15 directive: ASCII • STRING

    STRING  shift, and go to state 50


State 7

   16 directive: END •

    $default  reduce using rule 16 (directive)


State 8

   41 noop_opcode: HALT •

    $default  reduce using rule 41 (noop_opcode)


State 9

   42 noop_opcode: INT •

    $default  reduce using rule 42 (noop_opcode)


State 10

   19 instruction: IRET •

    $default  reduce using rule 19 (instruction)


State 11

   23 instruction: CALL • jmp_operand

    SYMBOL  shift, and go to state 51
    NUM     shift, and go to state 52

    jmp_operand  go to state 53


State 12

   18 instruction: RET •

    $default  reduce using rule 18 (instruction)


State 13

   24 instruction: JMP • jmp_operand

    SYMBOL  shift, and go to state 51
    NUM     shift, and go to state 52

    jmp_operand  go to state 54


State 14

   52 jmp_opcode: BEQ •

    $default  reduce using rule 52 (jmp_opcode)


State 15

   53 jmp_opcode: BNE •

    $default  reduce using rule 53 (jmp_opcode)


State 16

   54 jmp_opcode: BGT •

    $default  reduce using rule 54 (jmp_opcode)


State 17

   20 instruction: PUSH • REG

    REG  shift, and go to state 55


State 18

   21 instruction: POP • REG

    REG  shift, and go to state 56


State 19

   43 tworeg_opcode: ADD •

    $default  reduce using rule 43 (tworeg_opcode)


State 20

   44 tworeg_opcode: SUB •

    $default  reduce using rule 44 (tworeg_opcode)


State 21

   45 tworeg_opcode: MUL •

    $default  reduce using rule 45 (tworeg_opcode)


State 22

   46 tworeg_opcode: DIV •

    $default  reduce using rule 46 (tworeg_opcode)


State 23

   22 instruction: NOT • REG

    REG  shift, and go to state 57


State 24

   49 tworeg_opcode: AND •

    $default  reduce using rule 49 (tworeg_opcode)


State 25

   51 tworeg_opcode: OR •

    $default  reduce using rule 51 (tworeg_opcode)


State 26

   50 tworeg_opcode: XOR •

    $default  reduce using rule 50 (tworeg_opcode)


State 27

   47 tworeg_opcode: SHL •

    $default  reduce using rule 47 (tworeg_opcode)


State 28

   48 tworeg_opcode: SHR •

    $default  reduce using rule 48 (tworeg_opcode)


State 29

   27 instruction: LD • operand ',' REG

    SYMBOL  shift, and go to state 58
    NUM     shift, and go to state 59
    REG     shift, and go to state 60
    '$'     shift, and go to state 61
    '['     shift, and go to state 62

    operand  go to state 63


State 30

   28 instruction: ST • REG ',' operand

    REG  shift, and go to state 64


State 31

   29 instruction: CSRRD • SREG ',' REG

    SREG  shift, and go to state 65


State 32

   30 instruction: CSRWR • REG ',' SREG

    REG  shift, and go to state 66


State 33

   55 label: SYMBOL • ':'

    ':'  shift, and go to state 67


State 34

    0 $accept: program • $end

    $end  shift, and go to state 68


State 35

    1 program: lines •
    2 lines: lines • ENDL line
    3      | lines • ENDL

    ENDL  shift, and go to state 69

    $default  reduce using rule 1 (program)


State 36

    4 lines: line •

    $default  reduce using rule 4 (lines)


State 37

    8 line: directive •

    $default  reduce using rule 8 (line)


State 38

   10 line: instruction •

    $default  reduce using rule 10 (line)


State 39

   17 instruction: noop_opcode •

    $default  reduce using rule 17 (instruction)


State 40

   26 instruction: tworeg_opcode • REG ',' REG

    REG  shift, and go to state 70


State 41

   25 instruction: jmp_opcode • REG ',' REG ',' jmp_operand

    REG  shift, and go to state 71


State 42

    6 line: label •
    7     | label • directive
    9     | label • instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 4
    WORD     shift, and go to state 5
    ASCII    shift, and go to state 6
    END      shift, and go to state 7
    HALT     shift, and go to state 8
    INT      shift, and go to state 9
    IRET     shift, and go to state 10
    CALL     shift, and go to state 11
    RET      shift, and go to state 12
    JMP      shift, and go to state 13
    BEQ      shift, and go to state 14
    BNE      shift, and go to state 15
    BGT      shift, and go to state 16
    PUSH     shift, and go to state 17
    POP      shift, and go to state 18
    ADD      shift, and go to state 19
    SUB      shift, and go to state 20
    MUL      shift, and go to state 21
    DIV      shift, and go to state 22
    NOT      shift, and go to state 23
    AND      shift, and go to state 24
    OR       shift, and go to state 25
    XOR      shift, and go to state 26
    SHL      shift, and go to state 27
    SHR      shift, and go to state 28
    LD       shift, and go to state 29
    ST       shift, and go to state 30
    CSRRD    shift, and go to state 31
    CSRWR    shift, and go to state 32

    $default  reduce using rule 6 (line)

    directive      go to state 72
    instruction    go to state 73
    noop_opcode    go to state 39
    tworeg_opcode  go to state 40
    jmp_opcode     go to state 41


State 43

   56 SYMLIST: SYMBOL •

    $default  reduce using rule 56 (SYMLIST)


State 44

   12 directive: GLOBAL SYMLIST •
   57 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 74

    $default  reduce using rule 12 (directive)


State 45

   14 directive: EXTERN SYMLIST •
   57 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 74

    $default  reduce using rule 14 (directive)


State 46

   11 directive: SECTION SYMBOL •

    $default  reduce using rule 11 (directive)


State 47

   58 EXPR_LIST: SYMBOL •

    $default  reduce using rule 58 (EXPR_LIST)


State 48

   59 EXPR_LIST: NUM •

    $default  reduce using rule 59 (EXPR_LIST)


State 49

   13 directive: WORD EXPR_LIST •
   60 EXPR_LIST: EXPR_LIST • ',' SYMBOL
   61          | EXPR_LIST • ',' NUM

    ','  shift, and go to state 75

    $default  reduce using rule 13 (directive)


State 50

   15 directive: ASCII STRING •

    $default  reduce using rule 15 (directive)


State 51

   40 jmp_operand: SYMBOL •

    $default  reduce using rule 40 (jmp_operand)


State 52

   39 jmp_operand: NUM •

    $default  reduce using rule 39 (jmp_operand)


State 53

   23 instruction: CALL jmp_operand •

    $default  reduce using rule 23 (instruction)


State 54

   24 instruction: JMP jmp_operand •

    $default  reduce using rule 24 (instruction)


State 55

   20 instruction: PUSH REG •

    $default  reduce using rule 20 (instruction)


State 56

   21 instruction: POP REG •

    $default  reduce using rule 21 (instruction)


State 57

   22 instruction: NOT REG •

    $default  reduce using rule 22 (instruction)


State 58

   34 operand: SYMBOL •

    $default  reduce using rule 34 (operand)


State 59

   33 operand: NUM •

    $default  reduce using rule 33 (operand)


State 60

   35 operand: REG •

    $default  reduce using rule 35 (operand)


State 61

   31 operand: '$' • NUM
   32        | '$' • SYMBOL

    SYMBOL  shift, and go to state 76
    NUM     shift, and go to state 77


State 62

   36 operand: '[' • REG ']'
   37        | '[' • REG '+' NUM ']'
   38        | '[' • REG '+' SYMBOL ']'

    REG  shift, and go to state 78


State 63

   27 instruction: LD operand • ',' REG

    ','  shift, and go to state 79


State 64

   28 instruction: ST REG • ',' operand

    ','  shift, and go to state 80


State 65

   29 instruction: CSRRD SREG • ',' REG

    ','  shift, and go to state 81


State 66

   30 instruction: CSRWR REG • ',' SREG

    ','  shift, and go to state 82


State 67

   55 label: SYMBOL ':' •

    $default  reduce using rule 55 (label)


State 68

    0 $accept: program $end •

    $default  accept


State 69

    2 lines: lines ENDL • line
    3      | lines ENDL •

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 4
    WORD     shift, and go to state 5
    ASCII    shift, and go to state 6
    END      shift, and go to state 7
    HALT     shift, and go to state 8
    INT      shift, and go to state 9
    IRET     shift, and go to state 10
    CALL     shift, and go to state 11
    RET      shift, and go to state 12
    JMP      shift, and go to state 13
    BEQ      shift, and go to state 14
    BNE      shift, and go to state 15
    BGT      shift, and go to state 16
    PUSH     shift, and go to state 17
    POP      shift, and go to state 18
    ADD      shift, and go to state 19
    SUB      shift, and go to state 20
    MUL      shift, and go to state 21
    DIV      shift, and go to state 22
    NOT      shift, and go to state 23
    AND      shift, and go to state 24
    OR       shift, and go to state 25
    XOR      shift, and go to state 26
    SHL      shift, and go to state 27
    SHR      shift, and go to state 28
    LD       shift, and go to state 29
    ST       shift, and go to state 30
    CSRRD    shift, and go to state 31
    CSRWR    shift, and go to state 32
    SYMBOL   shift, and go to state 33

    $default  reduce using rule 3 (lines)

    line           go to state 83
    directive      go to state 37
    instruction    go to state 38
    noop_opcode    go to state 39
    tworeg_opcode  go to state 40
    jmp_opcode     go to state 41
    label          go to state 42


State 70

   26 instruction: tworeg_opcode REG • ',' REG

    ','  shift, and go to state 84


State 71

   25 instruction: jmp_opcode REG • ',' REG ',' jmp_operand

    ','  shift, and go to state 85


State 72

    7 line: label directive •

    $default  reduce using rule 7 (line)


State 73

    9 line: label instruction •

    $default  reduce using rule 9 (line)


State 74

   57 SYMLIST: SYMLIST ',' • SYMBOL

    SYMBOL  shift, and go to state 86


State 75

   60 EXPR_LIST: EXPR_LIST ',' • SYMBOL
   61          | EXPR_LIST ',' • NUM

    SYMBOL  shift, and go to state 87
    NUM     shift, and go to state 88


State 76

   32 operand: '$' SYMBOL •

    $default  reduce using rule 32 (operand)


State 77

   31 operand: '$' NUM •

    $default  reduce using rule 31 (operand)


State 78

   36 operand: '[' REG • ']'
   37        | '[' REG • '+' NUM ']'
   38        | '[' REG • '+' SYMBOL ']'

    ']'  shift, and go to state 89
    '+'  shift, and go to state 90


State 79

   27 instruction: LD operand ',' • REG

    REG  shift, and go to state 91


State 80

   28 instruction: ST REG ',' • operand

    SYMBOL  shift, and go to state 58
    NUM     shift, and go to state 59
    REG     shift, and go to state 60
    '$'     shift, and go to state 61
    '['     shift, and go to state 62

    operand  go to state 92


State 81

   29 instruction: CSRRD SREG ',' • REG

    REG  shift, and go to state 93


State 82

   30 instruction: CSRWR REG ',' • SREG

    SREG  shift, and go to state 94


State 83

    2 lines: lines ENDL line •

    $default  reduce using rule 2 (lines)


State 84

   26 instruction: tworeg_opcode REG ',' • REG

    REG  shift, and go to state 95


State 85

   25 instruction: jmp_opcode REG ',' • REG ',' jmp_operand

    REG  shift, and go to state 96


State 86

   57 SYMLIST: SYMLIST ',' SYMBOL •

    $default  reduce using rule 57 (SYMLIST)


State 87

   60 EXPR_LIST: EXPR_LIST ',' SYMBOL •

    $default  reduce using rule 60 (EXPR_LIST)


State 88

   61 EXPR_LIST: EXPR_LIST ',' NUM •

    $default  reduce using rule 61 (EXPR_LIST)


State 89

   36 operand: '[' REG ']' •

    $default  reduce using rule 36 (operand)


State 90

   37 operand: '[' REG '+' • NUM ']'
   38        | '[' REG '+' • SYMBOL ']'

    SYMBOL  shift, and go to state 97
    NUM     shift, and go to state 98


State 91

   27 instruction: LD operand ',' REG •

    $default  reduce using rule 27 (instruction)


State 92

   28 instruction: ST REG ',' operand •

    $default  reduce using rule 28 (instruction)


State 93

   29 instruction: CSRRD SREG ',' REG •

    $default  reduce using rule 29 (instruction)


State 94

   30 instruction: CSRWR REG ',' SREG •

    $default  reduce using rule 30 (instruction)


State 95

   26 instruction: tworeg_opcode REG ',' REG •

    $default  reduce using rule 26 (instruction)


State 96

   25 instruction: jmp_opcode REG ',' REG • ',' jmp_operand

    ','  shift, and go to state 99


State 97

   38 operand: '[' REG '+' SYMBOL • ']'

    ']'  shift, and go to state 100


State 98

   37 operand: '[' REG '+' NUM • ']'

    ']'  shift, and go to state 101


State 99

   25 instruction: jmp_opcode REG ',' REG ',' • jmp_operand

    SYMBOL  shift, and go to state 51
    NUM     shift, and go to state 52

    jmp_operand  go to state 102


State 100

   38 operand: '[' REG '+' SYMBOL ']' •

    $default  reduce using rule 38 (operand)


State 101

   37 operand: '[' REG '+' NUM ']' •

    $default  reduce using rule 37 (operand)


State 102

   25 instruction: jmp_opcode REG ',' REG ',' jmp_operand •

    $default  reduce using rule 25 (instruction)
