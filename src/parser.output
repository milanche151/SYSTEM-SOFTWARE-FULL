Terminals unused in grammar

    COLON
    SKIP
    EQU
    INT
    IRET
    CALL
    RET
    JMP
    BEQ
    BNE
    BGT
    XCHG
    SUB
    MUL
    DIV
    NOT
    AND
    OR
    XOR
    SHL
    SHR
    CSRRD
    CSRWR
    SREG


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line

    5 line: label
    6     | label directive
    7     | directive
    8     | label instruction
    9     | instruction

   10 directive: SECTION SYMBOL
   11          | GLOBAL SYMLIST
   12          | WORD EXPR_LIST
   13          | EXTERN SYMLIST
   14          | ASCII STRING
   15          | END

   16 instruction: noop_opcode
   17            | tworeg_opcode REG ',' REG
   18            | PUSH REG
   19            | POP REG
   20            | LD operand ',' REG
   21            | ST REG ',' operand

   22 operand: '$' NUM
   23        | '$' SYMBOL
   24        | NUM
   25        | SYMBOL
   26        | REG
   27        | '[' REG ']'
   28        | '[' REG '+' NUM ']'
   29        | '[' REG '+' SYMBOL ']'

   30 noop_opcode: HALT

   31 tworeg_opcode: ADD

   32 label: SYMBOL ':'

   33 SYMLIST: SYMBOL
   34        | SYMLIST ',' SYMBOL

   35 EXPR_LIST: SYMBOL
   36          | NUM
   37          | EXPR_LIST ',' SYMBOL
   38          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 22 23
    '+' (43) 28 29
    ',' (44) 17 20 21 34 37 38
    ':' (58) 32
    '[' (91) 27 28 29
    ']' (93) 27 28 29
    error (256)
    GLOBAL (258) 11
    EXTERN (259) 13
    ENDL (260) 2 3
    SECTION (261) 10
    COLON (262)
    WORD (263) 12
    SKIP (264)
    ASCII (265) 14
    EQU (266)
    END (267) 15
    HALT (268) 30
    INT (269)
    IRET (270)
    CALL (271)
    RET (272)
    JMP (273)
    BEQ (274)
    BNE (275)
    BGT (276)
    PUSH (277) 18
    POP (278) 19
    XCHG (279)
    ADD (280) 31
    SUB (281)
    MUL (282)
    DIV (283)
    NOT (284)
    AND (285)
    OR (286)
    XOR (287)
    SHL (288)
    SHR (289)
    LD (290) 20
    ST (291) 21
    CSRRD (292)
    CSRWR (293)
    SYMBOL <string> (294) 10 23 25 29 32 33 34 35 37
    STRING <string> (295) 14
    NUM <number> (296) 22 24 28 36 38
    REG <number> (297) 17 18 19 20 21 26 27 28 29
    SREG <number> (298)


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    lines (52)
        on left: 2 3 4
        on right: 1 2 3
    line (53)
        on left: 5 6 7 8 9
        on right: 2 4
    directive (54)
        on left: 10 11 12 13 14 15
        on right: 6 7
    instruction (55)
        on left: 16 17 18 19 20 21
        on right: 8 9
    operand <operand> (56)
        on left: 22 23 24 25 26 27 28 29
        on right: 20 21
    noop_opcode <instrType> (57)
        on left: 30
        on right: 16
    tworeg_opcode <instrType> (58)
        on left: 31
        on right: 17
    label (59)
        on left: 32
        on right: 5 6 8
    SYMLIST <stringvec> (60)
        on left: 33 34
        on right: 11 13 34
    EXPR_LIST <exprvec> (61)
        on left: 35 36 37 38
        on right: 12 37 38


State 0

    0 $accept: • program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    PUSH     shift, and go to state 8
    POP      shift, and go to state 9
    ADD      shift, and go to state 10
    LD       shift, and go to state 11
    ST       shift, and go to state 12
    SYMBOL   shift, and go to state 13

    program        go to state 14
    lines          go to state 15
    line           go to state 16
    directive      go to state 17
    instruction    go to state 18
    noop_opcode    go to state 19
    tworeg_opcode  go to state 20
    label          go to state 21


State 1

   11 directive: GLOBAL • SYMLIST

    SYMBOL  shift, and go to state 22

    SYMLIST  go to state 23


State 2

   13 directive: EXTERN • SYMLIST

    SYMBOL  shift, and go to state 22

    SYMLIST  go to state 24


State 3

   10 directive: SECTION • SYMBOL

    SYMBOL  shift, and go to state 25


State 4

   12 directive: WORD • EXPR_LIST

    SYMBOL  shift, and go to state 26
    NUM     shift, and go to state 27

    EXPR_LIST  go to state 28


State 5

   14 directive: ASCII • STRING

    STRING  shift, and go to state 29


State 6

   15 directive: END •

    $default  reduce using rule 15 (directive)


State 7

   30 noop_opcode: HALT •

    $default  reduce using rule 30 (noop_opcode)


State 8

   18 instruction: PUSH • REG

    REG  shift, and go to state 30


State 9

   19 instruction: POP • REG

    REG  shift, and go to state 31


State 10

   31 tworeg_opcode: ADD •

    $default  reduce using rule 31 (tworeg_opcode)


State 11

   20 instruction: LD • operand ',' REG

    SYMBOL  shift, and go to state 32
    NUM     shift, and go to state 33
    REG     shift, and go to state 34
    '$'     shift, and go to state 35
    '['     shift, and go to state 36

    operand  go to state 37


State 12

   21 instruction: ST • REG ',' operand

    REG  shift, and go to state 38


State 13

   32 label: SYMBOL • ':'

    ':'  shift, and go to state 39


State 14

    0 $accept: program • $end

    $end  shift, and go to state 40


State 15

    1 program: lines •
    2 lines: lines • ENDL line
    3      | lines • ENDL

    ENDL  shift, and go to state 41

    $default  reduce using rule 1 (program)


State 16

    4 lines: line •

    $default  reduce using rule 4 (lines)


State 17

    7 line: directive •

    $default  reduce using rule 7 (line)


State 18

    9 line: instruction •

    $default  reduce using rule 9 (line)


State 19

   16 instruction: noop_opcode •

    $default  reduce using rule 16 (instruction)


State 20

   17 instruction: tworeg_opcode • REG ',' REG

    REG  shift, and go to state 42


State 21

    5 line: label •
    6     | label • directive
    8     | label • instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    PUSH     shift, and go to state 8
    POP      shift, and go to state 9
    ADD      shift, and go to state 10
    LD       shift, and go to state 11
    ST       shift, and go to state 12

    $default  reduce using rule 5 (line)

    directive      go to state 43
    instruction    go to state 44
    noop_opcode    go to state 19
    tworeg_opcode  go to state 20


State 22

   33 SYMLIST: SYMBOL •

    $default  reduce using rule 33 (SYMLIST)


State 23

   11 directive: GLOBAL SYMLIST •
   34 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 45

    $default  reduce using rule 11 (directive)


State 24

   13 directive: EXTERN SYMLIST •
   34 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 45

    $default  reduce using rule 13 (directive)


State 25

   10 directive: SECTION SYMBOL •

    $default  reduce using rule 10 (directive)


State 26

   35 EXPR_LIST: SYMBOL •

    $default  reduce using rule 35 (EXPR_LIST)


State 27

   36 EXPR_LIST: NUM •

    $default  reduce using rule 36 (EXPR_LIST)


State 28

   12 directive: WORD EXPR_LIST •
   37 EXPR_LIST: EXPR_LIST • ',' SYMBOL
   38          | EXPR_LIST • ',' NUM

    ','  shift, and go to state 46

    $default  reduce using rule 12 (directive)


State 29

   14 directive: ASCII STRING •

    $default  reduce using rule 14 (directive)


State 30

   18 instruction: PUSH REG •

    $default  reduce using rule 18 (instruction)


State 31

   19 instruction: POP REG •

    $default  reduce using rule 19 (instruction)


State 32

   25 operand: SYMBOL •

    $default  reduce using rule 25 (operand)


State 33

   24 operand: NUM •

    $default  reduce using rule 24 (operand)


State 34

   26 operand: REG •

    $default  reduce using rule 26 (operand)


State 35

   22 operand: '$' • NUM
   23        | '$' • SYMBOL

    SYMBOL  shift, and go to state 47
    NUM     shift, and go to state 48


State 36

   27 operand: '[' • REG ']'
   28        | '[' • REG '+' NUM ']'
   29        | '[' • REG '+' SYMBOL ']'

    REG  shift, and go to state 49


State 37

   20 instruction: LD operand • ',' REG

    ','  shift, and go to state 50


State 38

   21 instruction: ST REG • ',' operand

    ','  shift, and go to state 51


State 39

   32 label: SYMBOL ':' •

    $default  reduce using rule 32 (label)


State 40

    0 $accept: program $end •

    $default  accept


State 41

    2 lines: lines ENDL • line
    3      | lines ENDL •

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    PUSH     shift, and go to state 8
    POP      shift, and go to state 9
    ADD      shift, and go to state 10
    LD       shift, and go to state 11
    ST       shift, and go to state 12
    SYMBOL   shift, and go to state 13

    $default  reduce using rule 3 (lines)

    line           go to state 52
    directive      go to state 17
    instruction    go to state 18
    noop_opcode    go to state 19
    tworeg_opcode  go to state 20
    label          go to state 21


State 42

   17 instruction: tworeg_opcode REG • ',' REG

    ','  shift, and go to state 53


State 43

    6 line: label directive •

    $default  reduce using rule 6 (line)


State 44

    8 line: label instruction •

    $default  reduce using rule 8 (line)


State 45

   34 SYMLIST: SYMLIST ',' • SYMBOL

    SYMBOL  shift, and go to state 54


State 46

   37 EXPR_LIST: EXPR_LIST ',' • SYMBOL
   38          | EXPR_LIST ',' • NUM

    SYMBOL  shift, and go to state 55
    NUM     shift, and go to state 56


State 47

   23 operand: '$' SYMBOL •

    $default  reduce using rule 23 (operand)


State 48

   22 operand: '$' NUM •

    $default  reduce using rule 22 (operand)


State 49

   27 operand: '[' REG • ']'
   28        | '[' REG • '+' NUM ']'
   29        | '[' REG • '+' SYMBOL ']'

    ']'  shift, and go to state 57
    '+'  shift, and go to state 58


State 50

   20 instruction: LD operand ',' • REG

    REG  shift, and go to state 59


State 51

   21 instruction: ST REG ',' • operand

    SYMBOL  shift, and go to state 32
    NUM     shift, and go to state 33
    REG     shift, and go to state 34
    '$'     shift, and go to state 35
    '['     shift, and go to state 36

    operand  go to state 60


State 52

    2 lines: lines ENDL line •

    $default  reduce using rule 2 (lines)


State 53

   17 instruction: tworeg_opcode REG ',' • REG

    REG  shift, and go to state 61


State 54

   34 SYMLIST: SYMLIST ',' SYMBOL •

    $default  reduce using rule 34 (SYMLIST)


State 55

   37 EXPR_LIST: EXPR_LIST ',' SYMBOL •

    $default  reduce using rule 37 (EXPR_LIST)


State 56

   38 EXPR_LIST: EXPR_LIST ',' NUM •

    $default  reduce using rule 38 (EXPR_LIST)


State 57

   27 operand: '[' REG ']' •

    $default  reduce using rule 27 (operand)


State 58

   28 operand: '[' REG '+' • NUM ']'
   29        | '[' REG '+' • SYMBOL ']'

    SYMBOL  shift, and go to state 62
    NUM     shift, and go to state 63


State 59

   20 instruction: LD operand ',' REG •

    $default  reduce using rule 20 (instruction)


State 60

   21 instruction: ST REG ',' operand •

    $default  reduce using rule 21 (instruction)


State 61

   17 instruction: tworeg_opcode REG ',' REG •

    $default  reduce using rule 17 (instruction)


State 62

   29 operand: '[' REG '+' SYMBOL • ']'

    ']'  shift, and go to state 64


State 63

   28 operand: '[' REG '+' NUM • ']'

    ']'  shift, and go to state 65


State 64

   29 operand: '[' REG '+' SYMBOL ']' •

    $default  reduce using rule 29 (operand)


State 65

   28 operand: '[' REG '+' NUM ']' •

    $default  reduce using rule 28 (operand)
