Terminals unused in grammar

    COLON
    SKIP
    EQU
    INT
    IRET
    CALL
    RET
    JMP
    BEQ
    BNE
    BGT
    PUSH
    POP
    XCHG
    SUB
    MUL
    DIV
    NOT
    AND
    OR
    XOR
    SHL
    SHR
    LD
    ST
    CSRRD
    CSRWR
    SREG


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line

    5 line: label
    6     | label directive
    7     | directive
    8     | label instruction
    9     | instruction

   10 directive: SECTION SYMBOL
   11          | GLOBAL SYMLIST
   12          | WORD EXPR_LIST
   13          | EXTERN SYMLIST
   14          | ASCII STRING
   15          | END

   16 instruction: noop_opcode
   17            | tworeg_opcode REG ',' REG

   18 noop_opcode: HALT

   19 tworeg_opcode: ADD

   20 label: SYMBOL ':'

   21 SYMLIST: SYMBOL
   22        | SYMLIST ',' SYMBOL

   23 EXPR_LIST: SYMBOL
   24          | NUM
   25          | EXPR_LIST ',' SYMBOL
   26          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    ',' (44) 17 22 25 26
    ':' (58) 20
    error (256)
    GLOBAL (258) 11
    EXTERN (259) 13
    ENDL (260) 2 3
    SECTION (261) 10
    COLON (262)
    WORD (263) 12
    SKIP (264)
    ASCII (265) 14
    EQU (266)
    END (267) 15
    HALT (268) 18
    INT (269)
    IRET (270)
    CALL (271)
    RET (272)
    JMP (273)
    BEQ (274)
    BNE (275)
    BGT (276)
    PUSH (277)
    POP (278)
    XCHG (279)
    ADD (280) 19
    SUB (281)
    MUL (282)
    DIV (283)
    NOT (284)
    AND (285)
    OR (286)
    XOR (287)
    SHL (288)
    SHR (289)
    LD (290)
    ST (291)
    CSRRD (292)
    CSRWR (293)
    SYMBOL <string> (294) 10 20 21 22 23 25
    STRING <string> (295) 14
    NUM <number> (296) 24 26
    REG <number> (297) 17
    SREG <number> (298)


Nonterminals, with rules where they appear

    $accept (46)
        on left: 0
    program (47)
        on left: 1
        on right: 0
    lines (48)
        on left: 2 3 4
        on right: 1 2 3
    line (49)
        on left: 5 6 7 8 9
        on right: 2 4
    directive (50)
        on left: 10 11 12 13 14 15
        on right: 6 7
    instruction (51)
        on left: 16 17
        on right: 8 9
    noop_opcode <instrType> (52)
        on left: 18
        on right: 16
    tworeg_opcode <instrType> (53)
        on left: 19
        on right: 17
    label (54)
        on left: 20
        on right: 5 6 8
    SYMLIST <stringvec> (55)
        on left: 21 22
        on right: 11 13 22
    EXPR_LIST <exprvec> (56)
        on left: 23 24 25 26
        on right: 12 25 26


State 0

    0 $accept: . program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    ADD      shift, and go to state 8
    SYMBOL   shift, and go to state 9

    program        go to state 10
    lines          go to state 11
    line           go to state 12
    directive      go to state 13
    instruction    go to state 14
    noop_opcode    go to state 15
    tworeg_opcode  go to state 16
    label          go to state 17


State 1

   11 directive: GLOBAL . SYMLIST

    SYMBOL  shift, and go to state 18

    SYMLIST  go to state 19


State 2

   13 directive: EXTERN . SYMLIST

    SYMBOL  shift, and go to state 18

    SYMLIST  go to state 20


State 3

   10 directive: SECTION . SYMBOL

    SYMBOL  shift, and go to state 21


State 4

   12 directive: WORD . EXPR_LIST

    SYMBOL  shift, and go to state 22
    NUM     shift, and go to state 23

    EXPR_LIST  go to state 24


State 5

   14 directive: ASCII . STRING

    STRING  shift, and go to state 25


State 6

   15 directive: END .

    $default  reduce using rule 15 (directive)


State 7

   18 noop_opcode: HALT .

    $default  reduce using rule 18 (noop_opcode)


State 8

   19 tworeg_opcode: ADD .

    $default  reduce using rule 19 (tworeg_opcode)


State 9

   20 label: SYMBOL . ':'

    ':'  shift, and go to state 26


State 10

    0 $accept: program . $end

    $end  shift, and go to state 27


State 11

    1 program: lines .
    2 lines: lines . ENDL line
    3      | lines . ENDL

    ENDL  shift, and go to state 28

    $default  reduce using rule 1 (program)


State 12

    4 lines: line .

    $default  reduce using rule 4 (lines)


State 13

    7 line: directive .

    $default  reduce using rule 7 (line)


State 14

    9 line: instruction .

    $default  reduce using rule 9 (line)


State 15

   16 instruction: noop_opcode .

    $default  reduce using rule 16 (instruction)


State 16

   17 instruction: tworeg_opcode . REG ',' REG

    REG  shift, and go to state 29


State 17

    5 line: label .
    6     | label . directive
    8     | label . instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    ADD      shift, and go to state 8

    $default  reduce using rule 5 (line)

    directive      go to state 30
    instruction    go to state 31
    noop_opcode    go to state 15
    tworeg_opcode  go to state 16


State 18

   21 SYMLIST: SYMBOL .

    $default  reduce using rule 21 (SYMLIST)


State 19

   11 directive: GLOBAL SYMLIST .
   22 SYMLIST: SYMLIST . ',' SYMBOL

    ','  shift, and go to state 32

    $default  reduce using rule 11 (directive)


State 20

   13 directive: EXTERN SYMLIST .
   22 SYMLIST: SYMLIST . ',' SYMBOL

    ','  shift, and go to state 32

    $default  reduce using rule 13 (directive)


State 21

   10 directive: SECTION SYMBOL .

    $default  reduce using rule 10 (directive)


State 22

   23 EXPR_LIST: SYMBOL .

    $default  reduce using rule 23 (EXPR_LIST)


State 23

   24 EXPR_LIST: NUM .

    $default  reduce using rule 24 (EXPR_LIST)


State 24

   12 directive: WORD EXPR_LIST .
   25 EXPR_LIST: EXPR_LIST . ',' SYMBOL
   26          | EXPR_LIST . ',' NUM

    ','  shift, and go to state 33

    $default  reduce using rule 12 (directive)


State 25

   14 directive: ASCII STRING .

    $default  reduce using rule 14 (directive)


State 26

   20 label: SYMBOL ':' .

    $default  reduce using rule 20 (label)


State 27

    0 $accept: program $end .

    $default  accept


State 28

    2 lines: lines ENDL . line
    3      | lines ENDL .

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    ADD      shift, and go to state 8
    SYMBOL   shift, and go to state 9

    $default  reduce using rule 3 (lines)

    line           go to state 34
    directive      go to state 13
    instruction    go to state 14
    noop_opcode    go to state 15
    tworeg_opcode  go to state 16
    label          go to state 17


State 29

   17 instruction: tworeg_opcode REG . ',' REG

    ','  shift, and go to state 35


State 30

    6 line: label directive .

    $default  reduce using rule 6 (line)


State 31

    8 line: label instruction .

    $default  reduce using rule 8 (line)


State 32

   22 SYMLIST: SYMLIST ',' . SYMBOL

    SYMBOL  shift, and go to state 36


State 33

   25 EXPR_LIST: EXPR_LIST ',' . SYMBOL
   26          | EXPR_LIST ',' . NUM

    SYMBOL  shift, and go to state 37
    NUM     shift, and go to state 38


State 34

    2 lines: lines ENDL line .

    $default  reduce using rule 2 (lines)


State 35

   17 instruction: tworeg_opcode REG ',' . REG

    REG  shift, and go to state 39


State 36

   22 SYMLIST: SYMLIST ',' SYMBOL .

    $default  reduce using rule 22 (SYMLIST)


State 37

   25 EXPR_LIST: EXPR_LIST ',' SYMBOL .

    $default  reduce using rule 25 (EXPR_LIST)


State 38

   26 EXPR_LIST: EXPR_LIST ',' NUM .

    $default  reduce using rule 26 (EXPR_LIST)


State 39

   17 instruction: tworeg_opcode REG ',' REG .

    $default  reduce using rule 17 (instruction)
