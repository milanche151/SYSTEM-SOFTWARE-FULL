Terminals unused in grammar

    COLON
    SKIP
    XCHG


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line
    5      | ENDL

    6 line: label
    7     | label directive
    8     | directive
    9     | label instruction
   10     | instruction

   11 directive: SECTION SYMBOL
   12          | GLOBAL SYMLIST
   13          | WORD EXPR_LIST
   14          | EXTERN SYMLIST
   15          | ASCII STRING
   16          | EQU SYMBOL ',' equ_expr
   17          | END

   18 equ_expr: equ_expr '+' equ_primary
   19         | equ_expr '-' equ_primary
   20         | equ_primary

   21 equ_primary: SYMBOL
   22            | NUM

   23 instruction: noop_opcode
   24            | RET
   25            | IRET
   26            | PUSH REG
   27            | POP REG
   28            | NOT REG
   29            | CALL jmp_operand
   30            | JMP jmp_operand
   31            | jmp_opcode REG ',' REG ',' jmp_operand
   32            | tworeg_opcode REG ',' REG
   33            | LD operand ',' REG
   34            | ST REG ',' operand
   35            | CSRRD SREG ',' REG
   36            | CSRWR REG ',' SREG

   37 operand: '$' NUM
   38        | '$' SYMBOL
   39        | NUM
   40        | SYMBOL
   41        | REG
   42        | '[' REG ']'
   43        | '[' REG '+' NUM ']'
   44        | '[' REG '+' SYMBOL ']'

   45 jmp_operand: NUM
   46            | SYMBOL

   47 noop_opcode: HALT
   48            | INT

   49 tworeg_opcode: ADD
   50              | SUB
   51              | MUL
   52              | DIV
   53              | SHL
   54              | SHR
   55              | AND
   56              | XOR
   57              | OR

   58 jmp_opcode: BEQ
   59           | BNE
   60           | BGT

   61 label: SYMBOL ':'

   62 SYMLIST: SYMBOL
   63        | SYMLIST ',' SYMBOL

   64 EXPR_LIST: SYMBOL
   65          | NUM
   66          | EXPR_LIST ',' SYMBOL
   67          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 37 38
    '+' (43) 18 43 44
    ',' (44) 16 31 32 33 34 35 36 63 66 67
    '-' (45) 19
    ':' (58) 61
    '[' (91) 42 43 44
    ']' (93) 42 43 44
    error (256)
    GLOBAL (258) 12
    EXTERN (259) 14
    ENDL (260) 2 3 5
    SECTION (261) 11
    COLON (262)
    WORD (263) 13
    SKIP (264)
    ASCII (265) 15
    EQU (266) 16
    END (267) 17
    HALT (268) 47
    INT (269) 48
    IRET (270) 25
    CALL (271) 29
    RET (272) 24
    JMP (273) 30
    BEQ (274) 58
    BNE (275) 59
    BGT (276) 60
    PUSH (277) 26
    POP (278) 27
    XCHG (279)
    ADD (280) 49
    SUB (281) 50
    MUL (282) 51
    DIV (283) 52
    NOT (284) 28
    AND (285) 55
    OR (286) 57
    XOR (287) 56
    SHL (288) 53
    SHR (289) 54
    LD (290) 33
    ST (291) 34
    CSRRD (292) 35
    CSRWR (293) 36
    SYMBOL <string> (294) 11 16 21 38 40 44 46 61 62 63 64 66
    STRING <string> (295) 15
    NUM <number> (296) 22 37 39 43 45 65 67
    REG <number> (297) 26 27 28 31 32 33 34 35 36 41 42 43 44
    SREG <number> (298) 35 36


Nonterminals, with rules where they appear

    $accept (51)
        on left: 0
    program (52)
        on left: 1
        on right: 0
    lines (53)
        on left: 2 3 4 5
        on right: 1 2 3
    line (54)
        on left: 6 7 8 9 10
        on right: 2 4
    directive (55)
        on left: 11 12 13 14 15 16 17
        on right: 7 8
    equ_expr <expr> (56)
        on left: 18 19 20
        on right: 16 18 19
    equ_primary <expr> (57)
        on left: 21 22
        on right: 18 19 20
    instruction (58)
        on left: 23 24 25 26 27 28 29 30 31 32 33 34 35 36
        on right: 9 10
    operand <operand> (59)
        on left: 37 38 39 40 41 42 43 44
        on right: 33 34
    jmp_operand <operand> (60)
        on left: 45 46
        on right: 29 30 31
    noop_opcode <instrType> (61)
        on left: 47 48
        on right: 23
    tworeg_opcode <instrType> (62)
        on left: 49 50 51 52 53 54 55 56 57
        on right: 32
    jmp_opcode <instrType> (63)
        on left: 58 59 60
        on right: 31
    label (64)
        on left: 61
        on right: 6 7 9
    SYMLIST <stringvec> (65)
        on left: 62 63
        on right: 12 14 63
    EXPR_LIST <exprvec> (66)
        on left: 64 65 66 67
        on right: 13 66 67


State 0

    0 $accept: • program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    ENDL     shift, and go to state 3
    SECTION  shift, and go to state 4
    WORD     shift, and go to state 5
    ASCII    shift, and go to state 6
    EQU      shift, and go to state 7
    END      shift, and go to state 8
    HALT     shift, and go to state 9
    INT      shift, and go to state 10
    IRET     shift, and go to state 11
    CALL     shift, and go to state 12
    RET      shift, and go to state 13
    JMP      shift, and go to state 14
    BEQ      shift, and go to state 15
    BNE      shift, and go to state 16
    BGT      shift, and go to state 17
    PUSH     shift, and go to state 18
    POP      shift, and go to state 19
    ADD      shift, and go to state 20
    SUB      shift, and go to state 21
    MUL      shift, and go to state 22
    DIV      shift, and go to state 23
    NOT      shift, and go to state 24
    AND      shift, and go to state 25
    OR       shift, and go to state 26
    XOR      shift, and go to state 27
    SHL      shift, and go to state 28
    SHR      shift, and go to state 29
    LD       shift, and go to state 30
    ST       shift, and go to state 31
    CSRRD    shift, and go to state 32
    CSRWR    shift, and go to state 33
    SYMBOL   shift, and go to state 34

    program        go to state 35
    lines          go to state 36
    line           go to state 37
    directive      go to state 38
    instruction    go to state 39
    noop_opcode    go to state 40
    tworeg_opcode  go to state 41
    jmp_opcode     go to state 42
    label          go to state 43


State 1

   12 directive: GLOBAL • SYMLIST

    SYMBOL  shift, and go to state 44

    SYMLIST  go to state 45


State 2

   14 directive: EXTERN • SYMLIST

    SYMBOL  shift, and go to state 44

    SYMLIST  go to state 46


State 3

    5 lines: ENDL •

    $default  reduce using rule 5 (lines)


State 4

   11 directive: SECTION • SYMBOL

    SYMBOL  shift, and go to state 47


State 5

   13 directive: WORD • EXPR_LIST

    SYMBOL  shift, and go to state 48
    NUM     shift, and go to state 49

    EXPR_LIST  go to state 50


State 6

   15 directive: ASCII • STRING

    STRING  shift, and go to state 51


State 7

   16 directive: EQU • SYMBOL ',' equ_expr

    SYMBOL  shift, and go to state 52


State 8

   17 directive: END •

    $default  reduce using rule 17 (directive)


State 9

   47 noop_opcode: HALT •

    $default  reduce using rule 47 (noop_opcode)


State 10

   48 noop_opcode: INT •

    $default  reduce using rule 48 (noop_opcode)


State 11

   25 instruction: IRET •

    $default  reduce using rule 25 (instruction)


State 12

   29 instruction: CALL • jmp_operand

    SYMBOL  shift, and go to state 53
    NUM     shift, and go to state 54

    jmp_operand  go to state 55


State 13

   24 instruction: RET •

    $default  reduce using rule 24 (instruction)


State 14

   30 instruction: JMP • jmp_operand

    SYMBOL  shift, and go to state 53
    NUM     shift, and go to state 54

    jmp_operand  go to state 56


State 15

   58 jmp_opcode: BEQ •

    $default  reduce using rule 58 (jmp_opcode)


State 16

   59 jmp_opcode: BNE •

    $default  reduce using rule 59 (jmp_opcode)


State 17

   60 jmp_opcode: BGT •

    $default  reduce using rule 60 (jmp_opcode)


State 18

   26 instruction: PUSH • REG

    REG  shift, and go to state 57


State 19

   27 instruction: POP • REG

    REG  shift, and go to state 58


State 20

   49 tworeg_opcode: ADD •

    $default  reduce using rule 49 (tworeg_opcode)


State 21

   50 tworeg_opcode: SUB •

    $default  reduce using rule 50 (tworeg_opcode)


State 22

   51 tworeg_opcode: MUL •

    $default  reduce using rule 51 (tworeg_opcode)


State 23

   52 tworeg_opcode: DIV •

    $default  reduce using rule 52 (tworeg_opcode)


State 24

   28 instruction: NOT • REG

    REG  shift, and go to state 59


State 25

   55 tworeg_opcode: AND •

    $default  reduce using rule 55 (tworeg_opcode)


State 26

   57 tworeg_opcode: OR •

    $default  reduce using rule 57 (tworeg_opcode)


State 27

   56 tworeg_opcode: XOR •

    $default  reduce using rule 56 (tworeg_opcode)


State 28

   53 tworeg_opcode: SHL •

    $default  reduce using rule 53 (tworeg_opcode)


State 29

   54 tworeg_opcode: SHR •

    $default  reduce using rule 54 (tworeg_opcode)


State 30

   33 instruction: LD • operand ',' REG

    SYMBOL  shift, and go to state 60
    NUM     shift, and go to state 61
    REG     shift, and go to state 62
    '$'     shift, and go to state 63
    '['     shift, and go to state 64

    operand  go to state 65


State 31

   34 instruction: ST • REG ',' operand

    REG  shift, and go to state 66


State 32

   35 instruction: CSRRD • SREG ',' REG

    SREG  shift, and go to state 67


State 33

   36 instruction: CSRWR • REG ',' SREG

    REG  shift, and go to state 68


State 34

   61 label: SYMBOL • ':'

    ':'  shift, and go to state 69


State 35

    0 $accept: program • $end

    $end  shift, and go to state 70


State 36

    1 program: lines •
    2 lines: lines • ENDL line
    3      | lines • ENDL

    ENDL  shift, and go to state 71

    $default  reduce using rule 1 (program)


State 37

    4 lines: line •

    $default  reduce using rule 4 (lines)


State 38

    8 line: directive •

    $default  reduce using rule 8 (line)


State 39

   10 line: instruction •

    $default  reduce using rule 10 (line)


State 40

   23 instruction: noop_opcode •

    $default  reduce using rule 23 (instruction)


State 41

   32 instruction: tworeg_opcode • REG ',' REG

    REG  shift, and go to state 72


State 42

   31 instruction: jmp_opcode • REG ',' REG ',' jmp_operand

    REG  shift, and go to state 73


State 43

    6 line: label •
    7     | label • directive
    9     | label • instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 4
    WORD     shift, and go to state 5
    ASCII    shift, and go to state 6
    EQU      shift, and go to state 7
    END      shift, and go to state 8
    HALT     shift, and go to state 9
    INT      shift, and go to state 10
    IRET     shift, and go to state 11
    CALL     shift, and go to state 12
    RET      shift, and go to state 13
    JMP      shift, and go to state 14
    BEQ      shift, and go to state 15
    BNE      shift, and go to state 16
    BGT      shift, and go to state 17
    PUSH     shift, and go to state 18
    POP      shift, and go to state 19
    ADD      shift, and go to state 20
    SUB      shift, and go to state 21
    MUL      shift, and go to state 22
    DIV      shift, and go to state 23
    NOT      shift, and go to state 24
    AND      shift, and go to state 25
    OR       shift, and go to state 26
    XOR      shift, and go to state 27
    SHL      shift, and go to state 28
    SHR      shift, and go to state 29
    LD       shift, and go to state 30
    ST       shift, and go to state 31
    CSRRD    shift, and go to state 32
    CSRWR    shift, and go to state 33

    $default  reduce using rule 6 (line)

    directive      go to state 74
    instruction    go to state 75
    noop_opcode    go to state 40
    tworeg_opcode  go to state 41
    jmp_opcode     go to state 42


State 44

   62 SYMLIST: SYMBOL •

    $default  reduce using rule 62 (SYMLIST)


State 45

   12 directive: GLOBAL SYMLIST •
   63 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 76

    $default  reduce using rule 12 (directive)


State 46

   14 directive: EXTERN SYMLIST •
   63 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 76

    $default  reduce using rule 14 (directive)


State 47

   11 directive: SECTION SYMBOL •

    $default  reduce using rule 11 (directive)


State 48

   64 EXPR_LIST: SYMBOL •

    $default  reduce using rule 64 (EXPR_LIST)


State 49

   65 EXPR_LIST: NUM •

    $default  reduce using rule 65 (EXPR_LIST)


State 50

   13 directive: WORD EXPR_LIST •
   66 EXPR_LIST: EXPR_LIST • ',' SYMBOL
   67          | EXPR_LIST • ',' NUM

    ','  shift, and go to state 77

    $default  reduce using rule 13 (directive)


State 51

   15 directive: ASCII STRING •

    $default  reduce using rule 15 (directive)


State 52

   16 directive: EQU SYMBOL • ',' equ_expr

    ','  shift, and go to state 78


State 53

   46 jmp_operand: SYMBOL •

    $default  reduce using rule 46 (jmp_operand)


State 54

   45 jmp_operand: NUM •

    $default  reduce using rule 45 (jmp_operand)


State 55

   29 instruction: CALL jmp_operand •

    $default  reduce using rule 29 (instruction)


State 56

   30 instruction: JMP jmp_operand •

    $default  reduce using rule 30 (instruction)


State 57

   26 instruction: PUSH REG •

    $default  reduce using rule 26 (instruction)


State 58

   27 instruction: POP REG •

    $default  reduce using rule 27 (instruction)


State 59

   28 instruction: NOT REG •

    $default  reduce using rule 28 (instruction)


State 60

   40 operand: SYMBOL •

    $default  reduce using rule 40 (operand)


State 61

   39 operand: NUM •

    $default  reduce using rule 39 (operand)


State 62

   41 operand: REG •

    $default  reduce using rule 41 (operand)


State 63

   37 operand: '$' • NUM
   38        | '$' • SYMBOL

    SYMBOL  shift, and go to state 79
    NUM     shift, and go to state 80


State 64

   42 operand: '[' • REG ']'
   43        | '[' • REG '+' NUM ']'
   44        | '[' • REG '+' SYMBOL ']'

    REG  shift, and go to state 81


State 65

   33 instruction: LD operand • ',' REG

    ','  shift, and go to state 82


State 66

   34 instruction: ST REG • ',' operand

    ','  shift, and go to state 83


State 67

   35 instruction: CSRRD SREG • ',' REG

    ','  shift, and go to state 84


State 68

   36 instruction: CSRWR REG • ',' SREG

    ','  shift, and go to state 85


State 69

   61 label: SYMBOL ':' •

    $default  reduce using rule 61 (label)


State 70

    0 $accept: program $end •

    $default  accept


State 71

    2 lines: lines ENDL • line
    3      | lines ENDL •

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 4
    WORD     shift, and go to state 5
    ASCII    shift, and go to state 6
    EQU      shift, and go to state 7
    END      shift, and go to state 8
    HALT     shift, and go to state 9
    INT      shift, and go to state 10
    IRET     shift, and go to state 11
    CALL     shift, and go to state 12
    RET      shift, and go to state 13
    JMP      shift, and go to state 14
    BEQ      shift, and go to state 15
    BNE      shift, and go to state 16
    BGT      shift, and go to state 17
    PUSH     shift, and go to state 18
    POP      shift, and go to state 19
    ADD      shift, and go to state 20
    SUB      shift, and go to state 21
    MUL      shift, and go to state 22
    DIV      shift, and go to state 23
    NOT      shift, and go to state 24
    AND      shift, and go to state 25
    OR       shift, and go to state 26
    XOR      shift, and go to state 27
    SHL      shift, and go to state 28
    SHR      shift, and go to state 29
    LD       shift, and go to state 30
    ST       shift, and go to state 31
    CSRRD    shift, and go to state 32
    CSRWR    shift, and go to state 33
    SYMBOL   shift, and go to state 34

    $default  reduce using rule 3 (lines)

    line           go to state 86
    directive      go to state 38
    instruction    go to state 39
    noop_opcode    go to state 40
    tworeg_opcode  go to state 41
    jmp_opcode     go to state 42
    label          go to state 43


State 72

   32 instruction: tworeg_opcode REG • ',' REG

    ','  shift, and go to state 87


State 73

   31 instruction: jmp_opcode REG • ',' REG ',' jmp_operand

    ','  shift, and go to state 88


State 74

    7 line: label directive •

    $default  reduce using rule 7 (line)


State 75

    9 line: label instruction •

    $default  reduce using rule 9 (line)


State 76

   63 SYMLIST: SYMLIST ',' • SYMBOL

    SYMBOL  shift, and go to state 89


State 77

   66 EXPR_LIST: EXPR_LIST ',' • SYMBOL
   67          | EXPR_LIST ',' • NUM

    SYMBOL  shift, and go to state 90
    NUM     shift, and go to state 91


State 78

   16 directive: EQU SYMBOL ',' • equ_expr

    SYMBOL  shift, and go to state 92
    NUM     shift, and go to state 93

    equ_expr     go to state 94
    equ_primary  go to state 95


State 79

   38 operand: '$' SYMBOL •

    $default  reduce using rule 38 (operand)


State 80

   37 operand: '$' NUM •

    $default  reduce using rule 37 (operand)


State 81

   42 operand: '[' REG • ']'
   43        | '[' REG • '+' NUM ']'
   44        | '[' REG • '+' SYMBOL ']'

    '+'  shift, and go to state 96
    ']'  shift, and go to state 97


State 82

   33 instruction: LD operand ',' • REG

    REG  shift, and go to state 98


State 83

   34 instruction: ST REG ',' • operand

    SYMBOL  shift, and go to state 60
    NUM     shift, and go to state 61
    REG     shift, and go to state 62
    '$'     shift, and go to state 63
    '['     shift, and go to state 64

    operand  go to state 99


State 84

   35 instruction: CSRRD SREG ',' • REG

    REG  shift, and go to state 100


State 85

   36 instruction: CSRWR REG ',' • SREG

    SREG  shift, and go to state 101


State 86

    2 lines: lines ENDL line •

    $default  reduce using rule 2 (lines)


State 87

   32 instruction: tworeg_opcode REG ',' • REG

    REG  shift, and go to state 102


State 88

   31 instruction: jmp_opcode REG ',' • REG ',' jmp_operand

    REG  shift, and go to state 103


State 89

   63 SYMLIST: SYMLIST ',' SYMBOL •

    $default  reduce using rule 63 (SYMLIST)


State 90

   66 EXPR_LIST: EXPR_LIST ',' SYMBOL •

    $default  reduce using rule 66 (EXPR_LIST)


State 91

   67 EXPR_LIST: EXPR_LIST ',' NUM •

    $default  reduce using rule 67 (EXPR_LIST)


State 92

   21 equ_primary: SYMBOL •

    $default  reduce using rule 21 (equ_primary)


State 93

   22 equ_primary: NUM •

    $default  reduce using rule 22 (equ_primary)


State 94

   16 directive: EQU SYMBOL ',' equ_expr •
   18 equ_expr: equ_expr • '+' equ_primary
   19         | equ_expr • '-' equ_primary

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 16 (directive)


State 95

   20 equ_expr: equ_primary •

    $default  reduce using rule 20 (equ_expr)


State 96

   43 operand: '[' REG '+' • NUM ']'
   44        | '[' REG '+' • SYMBOL ']'

    SYMBOL  shift, and go to state 106
    NUM     shift, and go to state 107


State 97

   42 operand: '[' REG ']' •

    $default  reduce using rule 42 (operand)


State 98

   33 instruction: LD operand ',' REG •

    $default  reduce using rule 33 (instruction)


State 99

   34 instruction: ST REG ',' operand •

    $default  reduce using rule 34 (instruction)


State 100

   35 instruction: CSRRD SREG ',' REG •

    $default  reduce using rule 35 (instruction)


State 101

   36 instruction: CSRWR REG ',' SREG •

    $default  reduce using rule 36 (instruction)


State 102

   32 instruction: tworeg_opcode REG ',' REG •

    $default  reduce using rule 32 (instruction)


State 103

   31 instruction: jmp_opcode REG ',' REG • ',' jmp_operand

    ','  shift, and go to state 108


State 104

   18 equ_expr: equ_expr '+' • equ_primary

    SYMBOL  shift, and go to state 92
    NUM     shift, and go to state 93

    equ_primary  go to state 109


State 105

   19 equ_expr: equ_expr '-' • equ_primary

    SYMBOL  shift, and go to state 92
    NUM     shift, and go to state 93

    equ_primary  go to state 110


State 106

   44 operand: '[' REG '+' SYMBOL • ']'

    ']'  shift, and go to state 111


State 107

   43 operand: '[' REG '+' NUM • ']'

    ']'  shift, and go to state 112


State 108

   31 instruction: jmp_opcode REG ',' REG ',' • jmp_operand

    SYMBOL  shift, and go to state 53
    NUM     shift, and go to state 54

    jmp_operand  go to state 113


State 109

   18 equ_expr: equ_expr '+' equ_primary •

    $default  reduce using rule 18 (equ_expr)


State 110

   19 equ_expr: equ_expr '-' equ_primary •

    $default  reduce using rule 19 (equ_expr)


State 111

   44 operand: '[' REG '+' SYMBOL ']' •

    $default  reduce using rule 44 (operand)


State 112

   43 operand: '[' REG '+' NUM ']' •

    $default  reduce using rule 43 (operand)


State 113

   31 instruction: jmp_opcode REG ',' REG ',' jmp_operand •

    $default  reduce using rule 31 (instruction)
