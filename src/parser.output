Terminals unused in grammar

    COLON
    SKIP
    EQU
    XCHG
    SUB
    MUL
    DIV
    NOT
    AND
    OR
    XOR
    SHL
    SHR


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: lines ENDL line
    3      | lines ENDL
    4      | line

    5 line: label
    6     | label directive
    7     | directive
    8     | label instruction
    9     | instruction

   10 directive: SECTION SYMBOL
   11          | GLOBAL SYMLIST
   12          | WORD EXPR_LIST
   13          | EXTERN SYMLIST
   14          | ASCII STRING
   15          | END

   16 instruction: noop_opcode
   17            | RET
   18            | IRET
   19            | PUSH REG
   20            | POP REG
   21            | CALL jmp_operand
   22            | JMP jmp_operand
   23            | jmp_opcode REG ',' REG ',' jmp_operand
   24            | tworeg_opcode REG ',' REG
   25            | LD operand ',' REG
   26            | ST REG ',' operand
   27            | CSRRD SREG ',' REG
   28            | CSRWR REG ',' SREG

   29 operand: '$' NUM
   30        | '$' SYMBOL
   31        | NUM
   32        | SYMBOL
   33        | REG
   34        | '[' REG ']'
   35        | '[' REG '+' NUM ']'
   36        | '[' REG '+' SYMBOL ']'

   37 jmp_operand: NUM
   38            | SYMBOL

   39 noop_opcode: HALT
   40            | INT

   41 tworeg_opcode: ADD

   42 jmp_opcode: BEQ
   43           | BNE
   44           | BGT

   45 label: SYMBOL ':'

   46 SYMLIST: SYMBOL
   47        | SYMLIST ',' SYMBOL

   48 EXPR_LIST: SYMBOL
   49          | NUM
   50          | EXPR_LIST ',' SYMBOL
   51          | EXPR_LIST ',' NUM


Terminals, with rules where they appear

    $end (0) 0
    '$' (36) 29 30
    '+' (43) 35 36
    ',' (44) 23 24 25 26 27 28 47 50 51
    ':' (58) 45
    '[' (91) 34 35 36
    ']' (93) 34 35 36
    error (256)
    GLOBAL (258) 11
    EXTERN (259) 13
    ENDL (260) 2 3
    SECTION (261) 10
    COLON (262)
    WORD (263) 12
    SKIP (264)
    ASCII (265) 14
    EQU (266)
    END (267) 15
    HALT (268) 39
    INT (269) 40
    IRET (270) 18
    CALL (271) 21
    RET (272) 17
    JMP (273) 22
    BEQ (274) 42
    BNE (275) 43
    BGT (276) 44
    PUSH (277) 19
    POP (278) 20
    XCHG (279)
    ADD (280) 41
    SUB (281)
    MUL (282)
    DIV (283)
    NOT (284)
    AND (285)
    OR (286)
    XOR (287)
    SHL (288)
    SHR (289)
    LD (290) 25
    ST (291) 26
    CSRRD (292) 27
    CSRWR (293) 28
    SYMBOL <string> (294) 10 30 32 36 38 45 46 47 48 50
    STRING <string> (295) 14
    NUM <number> (296) 29 31 35 37 49 51
    REG <number> (297) 19 20 23 24 25 26 27 28 33 34 35 36
    SREG <number> (298) 27 28


Nonterminals, with rules where they appear

    $accept (50)
        on left: 0
    program (51)
        on left: 1
        on right: 0
    lines (52)
        on left: 2 3 4
        on right: 1 2 3
    line (53)
        on left: 5 6 7 8 9
        on right: 2 4
    directive (54)
        on left: 10 11 12 13 14 15
        on right: 6 7
    instruction (55)
        on left: 16 17 18 19 20 21 22 23 24 25 26 27 28
        on right: 8 9
    operand <operand> (56)
        on left: 29 30 31 32 33 34 35 36
        on right: 25 26
    jmp_operand <operand> (57)
        on left: 37 38
        on right: 21 22 23
    noop_opcode <instrType> (58)
        on left: 39 40
        on right: 16
    tworeg_opcode <instrType> (59)
        on left: 41
        on right: 24
    jmp_opcode <instrType> (60)
        on left: 42 43 44
        on right: 23
    label (61)
        on left: 45
        on right: 5 6 8
    SYMLIST <stringvec> (62)
        on left: 46 47
        on right: 11 13 47
    EXPR_LIST <exprvec> (63)
        on left: 48 49 50 51
        on right: 12 50 51


State 0

    0 $accept: • program $end

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    ADD      shift, and go to state 18
    LD       shift, and go to state 19
    ST       shift, and go to state 20
    CSRRD    shift, and go to state 21
    CSRWR    shift, and go to state 22
    SYMBOL   shift, and go to state 23

    program        go to state 24
    lines          go to state 25
    line           go to state 26
    directive      go to state 27
    instruction    go to state 28
    noop_opcode    go to state 29
    tworeg_opcode  go to state 30
    jmp_opcode     go to state 31
    label          go to state 32


State 1

   11 directive: GLOBAL • SYMLIST

    SYMBOL  shift, and go to state 33

    SYMLIST  go to state 34


State 2

   13 directive: EXTERN • SYMLIST

    SYMBOL  shift, and go to state 33

    SYMLIST  go to state 35


State 3

   10 directive: SECTION • SYMBOL

    SYMBOL  shift, and go to state 36


State 4

   12 directive: WORD • EXPR_LIST

    SYMBOL  shift, and go to state 37
    NUM     shift, and go to state 38

    EXPR_LIST  go to state 39


State 5

   14 directive: ASCII • STRING

    STRING  shift, and go to state 40


State 6

   15 directive: END •

    $default  reduce using rule 15 (directive)


State 7

   39 noop_opcode: HALT •

    $default  reduce using rule 39 (noop_opcode)


State 8

   40 noop_opcode: INT •

    $default  reduce using rule 40 (noop_opcode)


State 9

   18 instruction: IRET •

    $default  reduce using rule 18 (instruction)


State 10

   21 instruction: CALL • jmp_operand

    SYMBOL  shift, and go to state 41
    NUM     shift, and go to state 42

    jmp_operand  go to state 43


State 11

   17 instruction: RET •

    $default  reduce using rule 17 (instruction)


State 12

   22 instruction: JMP • jmp_operand

    SYMBOL  shift, and go to state 41
    NUM     shift, and go to state 42

    jmp_operand  go to state 44


State 13

   42 jmp_opcode: BEQ •

    $default  reduce using rule 42 (jmp_opcode)


State 14

   43 jmp_opcode: BNE •

    $default  reduce using rule 43 (jmp_opcode)


State 15

   44 jmp_opcode: BGT •

    $default  reduce using rule 44 (jmp_opcode)


State 16

   19 instruction: PUSH • REG

    REG  shift, and go to state 45


State 17

   20 instruction: POP • REG

    REG  shift, and go to state 46


State 18

   41 tworeg_opcode: ADD •

    $default  reduce using rule 41 (tworeg_opcode)


State 19

   25 instruction: LD • operand ',' REG

    SYMBOL  shift, and go to state 47
    NUM     shift, and go to state 48
    REG     shift, and go to state 49
    '$'     shift, and go to state 50
    '['     shift, and go to state 51

    operand  go to state 52


State 20

   26 instruction: ST • REG ',' operand

    REG  shift, and go to state 53


State 21

   27 instruction: CSRRD • SREG ',' REG

    SREG  shift, and go to state 54


State 22

   28 instruction: CSRWR • REG ',' SREG

    REG  shift, and go to state 55


State 23

   45 label: SYMBOL • ':'

    ':'  shift, and go to state 56


State 24

    0 $accept: program • $end

    $end  shift, and go to state 57


State 25

    1 program: lines •
    2 lines: lines • ENDL line
    3      | lines • ENDL

    ENDL  shift, and go to state 58

    $default  reduce using rule 1 (program)


State 26

    4 lines: line •

    $default  reduce using rule 4 (lines)


State 27

    7 line: directive •

    $default  reduce using rule 7 (line)


State 28

    9 line: instruction •

    $default  reduce using rule 9 (line)


State 29

   16 instruction: noop_opcode •

    $default  reduce using rule 16 (instruction)


State 30

   24 instruction: tworeg_opcode • REG ',' REG

    REG  shift, and go to state 59


State 31

   23 instruction: jmp_opcode • REG ',' REG ',' jmp_operand

    REG  shift, and go to state 60


State 32

    5 line: label •
    6     | label • directive
    8     | label • instruction

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    ADD      shift, and go to state 18
    LD       shift, and go to state 19
    ST       shift, and go to state 20
    CSRRD    shift, and go to state 21
    CSRWR    shift, and go to state 22

    $default  reduce using rule 5 (line)

    directive      go to state 61
    instruction    go to state 62
    noop_opcode    go to state 29
    tworeg_opcode  go to state 30
    jmp_opcode     go to state 31


State 33

   46 SYMLIST: SYMBOL •

    $default  reduce using rule 46 (SYMLIST)


State 34

   11 directive: GLOBAL SYMLIST •
   47 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 63

    $default  reduce using rule 11 (directive)


State 35

   13 directive: EXTERN SYMLIST •
   47 SYMLIST: SYMLIST • ',' SYMBOL

    ','  shift, and go to state 63

    $default  reduce using rule 13 (directive)


State 36

   10 directive: SECTION SYMBOL •

    $default  reduce using rule 10 (directive)


State 37

   48 EXPR_LIST: SYMBOL •

    $default  reduce using rule 48 (EXPR_LIST)


State 38

   49 EXPR_LIST: NUM •

    $default  reduce using rule 49 (EXPR_LIST)


State 39

   12 directive: WORD EXPR_LIST •
   50 EXPR_LIST: EXPR_LIST • ',' SYMBOL
   51          | EXPR_LIST • ',' NUM

    ','  shift, and go to state 64

    $default  reduce using rule 12 (directive)


State 40

   14 directive: ASCII STRING •

    $default  reduce using rule 14 (directive)


State 41

   38 jmp_operand: SYMBOL •

    $default  reduce using rule 38 (jmp_operand)


State 42

   37 jmp_operand: NUM •

    $default  reduce using rule 37 (jmp_operand)


State 43

   21 instruction: CALL jmp_operand •

    $default  reduce using rule 21 (instruction)


State 44

   22 instruction: JMP jmp_operand •

    $default  reduce using rule 22 (instruction)


State 45

   19 instruction: PUSH REG •

    $default  reduce using rule 19 (instruction)


State 46

   20 instruction: POP REG •

    $default  reduce using rule 20 (instruction)


State 47

   32 operand: SYMBOL •

    $default  reduce using rule 32 (operand)


State 48

   31 operand: NUM •

    $default  reduce using rule 31 (operand)


State 49

   33 operand: REG •

    $default  reduce using rule 33 (operand)


State 50

   29 operand: '$' • NUM
   30        | '$' • SYMBOL

    SYMBOL  shift, and go to state 65
    NUM     shift, and go to state 66


State 51

   34 operand: '[' • REG ']'
   35        | '[' • REG '+' NUM ']'
   36        | '[' • REG '+' SYMBOL ']'

    REG  shift, and go to state 67


State 52

   25 instruction: LD operand • ',' REG

    ','  shift, and go to state 68


State 53

   26 instruction: ST REG • ',' operand

    ','  shift, and go to state 69


State 54

   27 instruction: CSRRD SREG • ',' REG

    ','  shift, and go to state 70


State 55

   28 instruction: CSRWR REG • ',' SREG

    ','  shift, and go to state 71


State 56

   45 label: SYMBOL ':' •

    $default  reduce using rule 45 (label)


State 57

    0 $accept: program $end •

    $default  accept


State 58

    2 lines: lines ENDL • line
    3      | lines ENDL •

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    ASCII    shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    ADD      shift, and go to state 18
    LD       shift, and go to state 19
    ST       shift, and go to state 20
    CSRRD    shift, and go to state 21
    CSRWR    shift, and go to state 22
    SYMBOL   shift, and go to state 23

    $default  reduce using rule 3 (lines)

    line           go to state 72
    directive      go to state 27
    instruction    go to state 28
    noop_opcode    go to state 29
    tworeg_opcode  go to state 30
    jmp_opcode     go to state 31
    label          go to state 32


State 59

   24 instruction: tworeg_opcode REG • ',' REG

    ','  shift, and go to state 73


State 60

   23 instruction: jmp_opcode REG • ',' REG ',' jmp_operand

    ','  shift, and go to state 74


State 61

    6 line: label directive •

    $default  reduce using rule 6 (line)


State 62

    8 line: label instruction •

    $default  reduce using rule 8 (line)


State 63

   47 SYMLIST: SYMLIST ',' • SYMBOL

    SYMBOL  shift, and go to state 75


State 64

   50 EXPR_LIST: EXPR_LIST ',' • SYMBOL
   51          | EXPR_LIST ',' • NUM

    SYMBOL  shift, and go to state 76
    NUM     shift, and go to state 77


State 65

   30 operand: '$' SYMBOL •

    $default  reduce using rule 30 (operand)


State 66

   29 operand: '$' NUM •

    $default  reduce using rule 29 (operand)


State 67

   34 operand: '[' REG • ']'
   35        | '[' REG • '+' NUM ']'
   36        | '[' REG • '+' SYMBOL ']'

    ']'  shift, and go to state 78
    '+'  shift, and go to state 79


State 68

   25 instruction: LD operand ',' • REG

    REG  shift, and go to state 80


State 69

   26 instruction: ST REG ',' • operand

    SYMBOL  shift, and go to state 47
    NUM     shift, and go to state 48
    REG     shift, and go to state 49
    '$'     shift, and go to state 50
    '['     shift, and go to state 51

    operand  go to state 81


State 70

   27 instruction: CSRRD SREG ',' • REG

    REG  shift, and go to state 82


State 71

   28 instruction: CSRWR REG ',' • SREG

    SREG  shift, and go to state 83


State 72

    2 lines: lines ENDL line •

    $default  reduce using rule 2 (lines)


State 73

   24 instruction: tworeg_opcode REG ',' • REG

    REG  shift, and go to state 84


State 74

   23 instruction: jmp_opcode REG ',' • REG ',' jmp_operand

    REG  shift, and go to state 85


State 75

   47 SYMLIST: SYMLIST ',' SYMBOL •

    $default  reduce using rule 47 (SYMLIST)


State 76

   50 EXPR_LIST: EXPR_LIST ',' SYMBOL •

    $default  reduce using rule 50 (EXPR_LIST)


State 77

   51 EXPR_LIST: EXPR_LIST ',' NUM •

    $default  reduce using rule 51 (EXPR_LIST)


State 78

   34 operand: '[' REG ']' •

    $default  reduce using rule 34 (operand)


State 79

   35 operand: '[' REG '+' • NUM ']'
   36        | '[' REG '+' • SYMBOL ']'

    SYMBOL  shift, and go to state 86
    NUM     shift, and go to state 87


State 80

   25 instruction: LD operand ',' REG •

    $default  reduce using rule 25 (instruction)


State 81

   26 instruction: ST REG ',' operand •

    $default  reduce using rule 26 (instruction)


State 82

   27 instruction: CSRRD SREG ',' REG •

    $default  reduce using rule 27 (instruction)


State 83

   28 instruction: CSRWR REG ',' SREG •

    $default  reduce using rule 28 (instruction)


State 84

   24 instruction: tworeg_opcode REG ',' REG •

    $default  reduce using rule 24 (instruction)


State 85

   23 instruction: jmp_opcode REG ',' REG • ',' jmp_operand

    ','  shift, and go to state 88


State 86

   36 operand: '[' REG '+' SYMBOL • ']'

    ']'  shift, and go to state 89


State 87

   35 operand: '[' REG '+' NUM • ']'

    ']'  shift, and go to state 90


State 88

   23 instruction: jmp_opcode REG ',' REG ',' • jmp_operand

    SYMBOL  shift, and go to state 41
    NUM     shift, and go to state 42

    jmp_operand  go to state 91


State 89

   36 operand: '[' REG '+' SYMBOL ']' •

    $default  reduce using rule 36 (operand)


State 90

   35 operand: '[' REG '+' NUM ']' •

    $default  reduce using rule 35 (operand)


State 91

   23 instruction: jmp_opcode REG ',' REG ',' jmp_operand •

    $default  reduce using rule 23 (instruction)
